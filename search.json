[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Remise à niveau informatique",
    "section": "",
    "text": "Bases de données et SQL (3h)\nPython - initiation (6h)\nProgrammation Orientée Objet (POO) (9h)\nUML (3h)\nDivers outils utiles (git, markdown, R…)"
  },
  {
    "objectID": "index.html#programme",
    "href": "index.html#programme",
    "title": "Remise à niveau informatique",
    "section": "",
    "text": "Bases de données et SQL (3h)\nPython - initiation (6h)\nProgrammation Orientée Objet (POO) (9h)\nUML (3h)\nDivers outils utiles (git, markdown, R…)"
  },
  {
    "objectID": "index.html#initiation-à-sql",
    "href": "index.html#initiation-à-sql",
    "title": "Remise à niveau informatique",
    "section": "1. Initiation à SQL",
    "text": "1. Initiation à SQL\n\nLisez le cours d’introduction aux bases de données et à SQL\nEffectuez le paramètrage pour utiliser DBeaver\nFaites l’exercice"
  },
  {
    "objectID": "index.html#initiation-à-python",
    "href": "index.html#initiation-à-python",
    "title": "Remise à niveau informatique",
    "section": "2. Initiation à Python",
    "text": "2. Initiation à Python\n\nLisez le cours d’introduction à Python\nLisez et faites les exercices des 5 notebooks"
  },
  {
    "objectID": "index.html#programmation-orientée-objet",
    "href": "index.html#programmation-orientée-objet",
    "title": "Remise à niveau informatique",
    "section": "3. Programmation Orientée Objet",
    "text": "3. Programmation Orientée Objet\nVous pouvez commencer par créer un clone du dépôt Git sur votre machine :\n\nOuvrez Git Bash, puis coller les commandes suivantes\n\nmkdir -p /p/Cours2A/UE3_Remise_a_niveau && cd $_\ngit clone https://github.com/ludo2ne/ENSAI-2A-remise-a-niveau.git\ncela crée une copie du dépôt dans P:/Cours2A/UE3_Remise_a_niveau/ENSAI-2A-remise-a-niveau\n\n\n\n\nLisez le cours d’introduction à la POO\nSuivez les consignes pour le paramètrage de VSCode\nFaites les exercices"
  },
  {
    "objectID": "index.html#uml",
    "href": "index.html#uml",
    "title": "Remise à niveau informatique",
    "section": "4. UML",
    "text": "4. UML\n\nLisez le cours d’introduction à UML\nFaites l’exercice"
  },
  {
    "objectID": "index.html#alternatives",
    "href": "index.html#alternatives",
    "title": "Remise à niveau informatique",
    "section": "Alternatives",
    "text": "Alternatives\nVoici d’autres possibilités pour se mettre à niveau en Python, POO et SQL\n\nVidéos de la session 2022-2023\nsi vous avez vos accès à MyENSAI, les vidéos de la session de l’année 2022-2023 sont disponibles ici\n\n\nCours en ligne pour apprendre Python et SQL\n\nSQL\nPython (parties 1 et 2)\nPOO avec Python (parties 1 et 2)\n\n\n\nRessources utiles\n\nhttps://realpython.com/\nhttps://refactoring.guru/\nhttps://github.com/faif/python-patterns\nhttps://inseefrlab.github.io/formation-bonnes-pratiques-git-R/"
  },
  {
    "objectID": "docs/sql/DBeaver.html",
    "href": "docs/sql/DBeaver.html",
    "title": "DBeaver",
    "section": "",
    "text": "DBeaver est un logiciel qui permet de se connecter à une base de données. Il offre une interface graphique conviviale pour se connecter, gérer et requêter différentes bases de données, notamment MySQL, PostgreSQL, Oracle, SQLite, et bien d’autres encore.\nOuvrez le logiciel DBeaver installé sur votre VM, puis suivez les indications ci-dessous."
  },
  {
    "objectID": "docs/sql/DBeaver.html#configuration",
    "href": "docs/sql/DBeaver.html#configuration",
    "title": "DBeaver",
    "section": "1 Configuration",
    "text": "1 Configuration\n\nMenu Fenêtre &gt; Preference\n\nFormatage SQL\n\nCasse des mots clefs : UPPER\nInsert spaces for tabs\nAppliquer\n\nMetadonnées\n\nDécocher Ouvrir une connexion séparée pour la lecture des étadonnées\n\nEditeur SQL\n\nDécocher Ouvrir une connexion séparée pour chaque éditeur\n\n\n\n\nOptionnel\n\nTemplates\n\nEnlever les modèles existants\nImporter le fichier templates_dbeaver.xml\nLes templates permettent d’écrire plus rapidement des requêtes"
  },
  {
    "objectID": "docs/sql/DBeaver.html#créer-la-connexion",
    "href": "docs/sql/DBeaver.html#créer-la-connexion",
    "title": "DBeaver",
    "section": "2 Créer la connexion",
    "text": "2 Créer la connexion\nPour créer une connexion vers la base de données ENSAI sur la VM :\n\nCliquer sur l’icone Nouvelle connexion en haut à gauche sous fichier\nSélectionner PostgreSQL puis suivant\n\nHost : sgbd-eleves.domensai.ecole\nPort : 5432\nDatabase : idxxxx\nNom d’utilisateur : idxxxx\nMot de passe : idxxxx\nTest de connexion\nAcceptez les mises à jour des pilotes\nTerminer"
  },
  {
    "objectID": "docs/sql/DBeaver.html#exécuter-du-sql",
    "href": "docs/sql/DBeaver.html#exécuter-du-sql",
    "title": "DBeaver",
    "section": "3 Exécuter du SQL",
    "text": "3 Exécuter du SQL\n\nCliquer sur l’icone SQL\nExécuter la requête courante (où est le curseur de la souris):\n\nCTRL + ENTREE\nle petit triangle orange\n\nExécuter toutes les requêtes\n\nle triangle orange à l’intérieur d’un parachemin"
  },
  {
    "objectID": "docs/sql/DBeaver.html#interface-pgadmin",
    "href": "docs/sql/DBeaver.html#interface-pgadmin",
    "title": "DBeaver",
    "section": "4 Interface pgAdmin",
    "text": "4 Interface pgAdmin\nEn cas de soucis avec DBeaver, une autre solution pour éxécuter des requêtes SQL est de passer par l’interface  pgAdmin\n\nUtilisateur : idxxxx\nMot de passe : idxxxx\nUne fois connecté, cliquez sur idxxxx dans le menu de gauche\ncliquez sur SQL pour exécuter des requêtes"
  },
  {
    "objectID": "docs/python/python-cours.html",
    "href": "docs/python/python-cours.html",
    "title": "Introduction à Python",
    "section": "",
    "text": "Créé par Guido van Rossum (Pays-Bas)\n1ère version en 1991\nGéré par la Python Software Foundation depuis 2001\nPython 3.12\n\n\n\nCréé fin 1989 pendant les vacances de Noël\nPython Software Foundation (asso à but non lucratif) : promouvoir et protéger le langage afin d’étendre la communauté"
  },
  {
    "objectID": "docs/python/python-cours.html#historique",
    "href": "docs/python/python-cours.html#historique",
    "title": "Introduction à Python",
    "section": "",
    "text": "Créé par Guido van Rossum (Pays-Bas)\n1ère version en 1991\nGéré par la Python Software Foundation depuis 2001\nPython 3.12\n\n\n\nCréé fin 1989 pendant les vacances de Noël\nPython Software Foundation (asso à but non lucratif) : promouvoir et protéger le langage afin d’étendre la communauté"
  },
  {
    "objectID": "docs/python/python-cours.html#pourquoi-apprendre-python",
    "href": "docs/python/python-cours.html#pourquoi-apprendre-python",
    "title": "Introduction à Python",
    "section": "Pourquoi Apprendre Python ?",
    "text": "Pourquoi Apprendre Python ?\n\nLangage polyvalent et populaire\nFacilité d’apprentissage et de lecture\nLarge communauté et nombreuses ressources\nNombreux packages\n\n\n\nImportant dans le monde de la data science et de l’ingénierie."
  },
  {
    "objectID": "docs/python/python-cours.html#les-fondamentaux-de-python",
    "href": "docs/python/python-cours.html#les-fondamentaux-de-python",
    "title": "Introduction à Python",
    "section": "Les Fondamentaux de Python",
    "text": "Les Fondamentaux de Python\n\nLangage interprété et interactif\nTypage Dynamique\nSyntaxe claire et concise\nSupporte plusieurs paradigmes (procédural, orienté objet, fonctionnel)\n\n\n\nExpliquer la différence entre un langage interprété et compilé.\ninteractif : environnement où vous pouvez entrer des commandes Python une par une, voir immédiatement les résultats (Notebook)\nTypage Dynamique (vérification des types au moment de l’exécution)\na = 5\na = \"toto\""
  },
  {
    "objectID": "docs/python/python-cours.html#python-à-lensai",
    "href": "docs/python/python-cours.html#python-à-lensai",
    "title": "Introduction à Python",
    "section": "Python à l’ENSAI",
    "text": "Python à l’ENSAI\n\nDistribution CPython\nVersion 3.10 (python --version)\nVous allez coder dans :\n\ndes notebooks Jupyter\nVisual Studio Code\n\nPackages pré-installés\n\n\nDistribution : version pré-packagée de l’interpréteur Python accompagnée de nombreux modules, bibliothèques et outils\n\nAnaconda (datascience et machine learning)\nMiniconda (plus léger)\n\nAutre IDE : PyCharm, Atom\nGestionnnaire de packages pip, à lancer dans un terminal"
  },
  {
    "objectID": "docs/python/python-cours.html#packages",
    "href": "docs/python/python-cours.html#packages",
    "title": "Introduction à Python",
    "section": "Packages",
    "text": "Packages\nDans un terminal (par exemple : Git Bash)\npip list                            # Packages installés\npip install &lt;package&gt;               # Installer un package\npip install &lt;package&gt;==&lt;version&gt;    # Version spécifique\npip uninstall &lt;package&gt;\n\n# Distribution utilisée\npython -c 'import platform; print(platform.python_implementation())'\n\nEn projet :\n\nliste des packages dans un fichier texte à la racine\npip install - r requirements.txt\n\nDémo : lancer python dans le terminal\n\n\nPackages populaires\nDatascience :\n\nNumPy\nPandas, Polars\nMatplotlib, Seaborn\n\n\n\nNumPy\n\nCalcul numérique\nndarray, perf, stats, manipulation des tableaux\n\nPandas\n\ndataframe, analyse de données\n\nMatplotlib : graphiques"
  },
  {
    "objectID": "docs/python/python-cours.html#écrire-votre-premier-code-en-python",
    "href": "docs/python/python-cours.html#écrire-votre-premier-code-en-python",
    "title": "Introduction à Python",
    "section": "Écrire votre Premier Code en Python",
    "text": "Écrire votre Premier Code en Python\n\nVariables et types de données (int, float, str, bool, list, dict)\nOpérations de base\nSensible à l’indentation\nStructures de contrôle (if, for, while)\n\n\n\n= : affectation\n== : test d’égalité / != différence\n\nindentation : utiliser un formateur dans VSCode\n\n\nStructures de contrôle\n\nIfForWhileEnumerate\n\n\n\nnote = 18\n\nif note &gt; 16:\n    print(\"Validé avec mention\")\nelif note &gt; 10:\n    print(\"Validé\")\nelse:\n    print(\"Non validé\")\n\nValidé avec mention\n\n\n\n\n\nfor i in range(1, 5):\n    print(i)\n\n1\n2\n3\n4\n\n\n\n\n\ncpt = 10\nwhile cpt &gt; 0:\n    print(cpt, end = \" \")\n    cpt -= 1    \nprint(\"boom\")\n\n10 9 8 7 6 5 4 3 2 1 boom\n\n\n\n\n\nliste = [\"Alban\", \"Bertille\", \"Corine\"]\n\nfor i, v in enumerate(liste):\n    print(f\"index {i} : valeur {v}\")\n\nindex 0 : valeur Alban\nindex 1 : valeur Bertille\nindex 2 : valeur Corine"
  },
  {
    "objectID": "docs/python/python-cours.html#collections---les-2-principales",
    "href": "docs/python/python-cours.html#collections---les-2-principales",
    "title": "Introduction à Python",
    "section": "Collections - les 2 principales",
    "text": "Collections - les 2 principales\n\nListe : collection ordonnée de valeurs modifiables\nlist = [\"pomme\", \"poire\", 2, True]\nDictionnaire : collection de paires clé-valeur non ordonnées\nrecette = {\"fraise\": 5, \"Moutarde\": \"5g\"}\n\n\nAutres Collections utiles\n\nSet : collection non ordonnée de valeurs uniques\npremiers = {2, 3, 5, 7, 11, 13}\nTuple : collection ordonnée de valeurs immuables\ncoord = (-1, 5, 4)\n\n\n\n\n\n\n\nNote\n\n\n\nDe nombreux autres types de collections existent (Arbre, Liste chainée…).\n\n\n\n\nCollections principales - résumé\n\n\n\nType de Donnée\nOrdonné\nMutable\nDoublon\n\n\n\n\nlist\n✔\n✔\n\n\n\ndict\n\n✔\n\n\n\ntuple\n✔\n\n✔\n\n\nset\n\n✔"
  },
  {
    "objectID": "docs/python/python-cours.html#aide-au-développement",
    "href": "docs/python/python-cours.html#aide-au-développement",
    "title": "Introduction à Python",
    "section": "Aide au développement",
    "text": "Aide au développement\nPour apprendre le langage, évitez de foncer vers les LLM.\nPréférez :\n\nAide en ligne\nVotre moteur de recherche favori\nStack Overflow\n\n\nRessources utiles\n\nReal Python\nPython pour la datascience\nAutomate the Boring Stuff with Python\n\n\nLLM pas adapté pour retenir mais pratique pour :\n\ndéboguer\ndocumenter"
  },
  {
    "objectID": "docs/python/python-cours.html#au-travail",
    "href": "docs/python/python-cours.html#au-travail",
    "title": "Introduction à Python",
    "section": "Au travail",
    "text": "Au travail\n5 notebooks sont à votre disposition pour apprendre les bases du langage :\nComment utiliser les notebooks"
  },
  {
    "objectID": "docs/python/python-cours-slides.html#historique",
    "href": "docs/python/python-cours-slides.html#historique",
    "title": "Introduction à Python",
    "section": "Historique",
    "text": "Historique\n\nCréé par Guido van Rossum (Pays-Bas)\n1ère version en 1991\nGéré par la Python Software Foundation depuis 2001\nPython 3.12\n\n\n\nCréé fin 1989 pendant les vacances de Noël\nPython Software Foundation (asso à but non lucratif) : promouvoir et protéger le langage afin d’étendre la communauté"
  },
  {
    "objectID": "docs/python/python-cours-slides.html#pourquoi-apprendre-python",
    "href": "docs/python/python-cours-slides.html#pourquoi-apprendre-python",
    "title": "Introduction à Python",
    "section": "Pourquoi Apprendre Python ?",
    "text": "Pourquoi Apprendre Python ?\n\nLangage polyvalent et populaire\nFacilité d’apprentissage et de lecture\nLarge communauté et nombreuses ressources\nNombreux packages\n\n\n\nImportant dans le monde de la data science et de l’ingénierie."
  },
  {
    "objectID": "docs/python/python-cours-slides.html#les-fondamentaux-de-python",
    "href": "docs/python/python-cours-slides.html#les-fondamentaux-de-python",
    "title": "Introduction à Python",
    "section": "Les Fondamentaux de Python",
    "text": "Les Fondamentaux de Python\n\nLangage interprété et interactif\nTypage Dynamique\nSyntaxe claire et concise\nSupporte plusieurs paradigmes (procédural, orienté objet, fonctionnel)\n\n\n\nExpliquer la différence entre un langage interprété et compilé.\ninteractif : environnement où vous pouvez entrer des commandes Python une par une, voir immédiatement les résultats (Notebook)\nTypage Dynamique (vérification des types au moment de l’exécution)\na = 5\na = \"toto\""
  },
  {
    "objectID": "docs/python/python-cours-slides.html#python-à-lensai",
    "href": "docs/python/python-cours-slides.html#python-à-lensai",
    "title": "Introduction à Python",
    "section": "Python à l’ENSAI",
    "text": "Python à l’ENSAI\n\nDistribution CPython\nVersion 3.10 (python --version)\nVous allez coder dans :\n\ndes notebooks Jupyter\nVisual Studio Code\n\nPackages pré-installés\n\n\nDistribution : version pré-packagée de l’interpréteur Python accompagnée de nombreux modules, bibliothèques et outils\n\nAnaconda (datascience et machine learning)\nMiniconda (plus léger)\n\nAutre IDE : PyCharm, Atom\nGestionnnaire de packages pip, à lancer dans un terminal"
  },
  {
    "objectID": "docs/python/python-cours-slides.html#packages",
    "href": "docs/python/python-cours-slides.html#packages",
    "title": "Introduction à Python",
    "section": "Packages",
    "text": "Packages\nDans un terminal (par exemple : Git Bash)\npip list                            # Packages installés\npip install &lt;package&gt;               # Installer un package\npip install &lt;package&gt;==&lt;version&gt;    # Version spécifique\npip uninstall &lt;package&gt;\n\n# Distribution utilisée\npython -c 'import platform; print(platform.python_implementation())'\n\nEn projet :\n\nliste des packages dans un fichier texte à la racine\npip install - r requirements.txt\n\nDémo : lancer python dans le terminal"
  },
  {
    "objectID": "docs/python/python-cours-slides.html#écrire-votre-premier-code-en-python",
    "href": "docs/python/python-cours-slides.html#écrire-votre-premier-code-en-python",
    "title": "Introduction à Python",
    "section": "Écrire votre Premier Code en Python",
    "text": "Écrire votre Premier Code en Python\n\nVariables et types de données (int, float, str, bool, list, dict)\nOpérations de base\nSensible à l’indentation\nStructures de contrôle (if, for, while)\n\n\n\n= : affectation\n== : test d’égalité / != différence\n\nindentation : utiliser un formateur dans VSCode"
  },
  {
    "objectID": "docs/python/python-cours-slides.html#collections---les-2-principales",
    "href": "docs/python/python-cours-slides.html#collections---les-2-principales",
    "title": "Introduction à Python",
    "section": "Collections - les 2 principales",
    "text": "Collections - les 2 principales\n\nListe : collection ordonnée de valeurs modifiables\nlist = [\"pomme\", \"poire\", 2, True]\nDictionnaire : collection de paires clé-valeur non ordonnées\nrecette = {\"fraise\": 5, \"Moutarde\": \"5g\"}"
  },
  {
    "objectID": "docs/python/python-cours-slides.html#aide-au-développement",
    "href": "docs/python/python-cours-slides.html#aide-au-développement",
    "title": "Introduction à Python",
    "section": "Aide au développement",
    "text": "Aide au développement\nPour apprendre le langage, évitez de foncer vers les LLM.\nPréférez :\n\nAide en ligne\nVotre moteur de recherche favori\nStack Overflow"
  },
  {
    "objectID": "docs/python/python-cours-slides.html#au-travail",
    "href": "docs/python/python-cours-slides.html#au-travail",
    "title": "Introduction à Python",
    "section": "Au travail",
    "text": "Au travail\n5 notebooks sont à votre disposition pour apprendre les bases du langage :\nComment utiliser les notebooks\n\n\n\nHome — Introduction à Python"
  },
  {
    "objectID": "docs/python/04-fonctions.html",
    "href": "docs/python/04-fonctions.html",
    "title": "Les fonctions",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/04-fonctions.html#avant-de-commencer",
    "href": "docs/python/04-fonctions.html#avant-de-commencer",
    "title": "Les fonctions",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/04-fonctions.html#fonctions",
    "href": "docs/python/04-fonctions.html#fonctions",
    "title": "Les fonctions",
    "section": "1 Fonctions",
    "text": "1 Fonctions\nL’idée d’une fonction est de regrouper ensemble des morceaux de codes qui pourraient être utilisés à plusieurs endroits de votre programme.\nUtiliser des fonctions est une bonne pratique :\n\ncela réduit la duplication du code\ncela permet de mieux structurer le code et le rendre plus clair\n\nUne fonction est composée de :\n\nun ensemble de paramètres\ndes instructions qui utilisent les paramètres\nretourne ou affiche un résultat\n\nLe mot clé def sert à définir une fonction.\nVoici un exemple de fonction :\n\nNom de la fonction : ma_fonction\nParamètres : 2 paramètres p1 et p2\nSortie : résultat de l’opération p1 x p2 + p1 + 5\n\n\ndef ma_fonction(p1, p2):\n    resultat = p1 * p2 + p1 + 5\n    return resultat\n\nMaintenant que notre fonction est définie, nous pouvons l’appeler autant de fois que nous le souhaitons\n\nma_fonction(2, 6)\n\n\nma_fonction(5, 1) + ma_fonction(8, 2)\n\n\n1.1 Arguments\nLes arguments sont les paramètres de la fonction.\nLorsqu’on appelle une fonction en lui spécifiant des arguments, on dit qu’on lui « passe » des arguments.\nCes arguments deviennent alors des variables qui peuvent être utilisées uniquement à l’intérieur de la fonction.\n\ndef maximum(a, b):\n    if a &gt; b:\n        resultat = a\n    else:\n        resultat = b\n    return resultat\n\n\nmaximum(1, 5)\n\nÀ l’extérieur des fonctions, les arguments n’existent plus et ne sont plus connus.\n\na\n\n\nPassage par position et passage par mot-clé\nEn Python, les fonctions admettent deux modes de passage des arguments :\n\nle passage par position : les arguments sont passés dans l’ordre dans lequel ils ont été définis\nle passage par mot-clé : on précise le nom du paramètre lors du passage de l’argument\n\nIllustrons cette différence à partir d’une fonction qui réalise simplement une division.\n\ndef division(x, y):\n    if y == 0:\n        print(\"ERREUR : Division par 0 impossible\")\n    else:\n        return x / y\n\n\n# Passage par position\ndivision(8, 2)  \n\n\n# Passage par mot-clé\ndivision(x=8, y=2)  \n\nDans le cas du passage par position, le respect de l’ordre est impératif.\n\nprint(division(0, 5))\nprint(division(5, 0))\n\nNous remarquons que s’affiche None ci-dessus.\nL’explication est que lorsque l’on passe dans la partie de code if y == 0, il n’y a pas de return.\nDonc par défaut la méthode renvoie None, ce qui représente l’absence de valeur.\nDans le cas du passage par mot-clé, l’ordre n’a plus d’importance.\n\nprint(division(x=0, y=5))\nprint(division(y=5, x=0))\n\n\n\nArguments obligatoires et arguments optionnels\nLorsqu’on définit une fonction, il est fréquent de vouloir faire cohabiter :\n\ndes arguments que doit absolument spécifier l’utilisateur\ndes arguments optionnels qui spécifient un comportement par défaut de la fonction, mais peuvent également être modifiés si nécessaire\n\nRegardons par exemple comment on peut modifier le comportement de la fonction print à l’aide d’un argument optionnel.\n\nprint(\"salut\")\nprint(\"salut\")\n\n\nprint(\"salut\", end=' ')\nprint(\"salut\")\n\nNous avons modifié le comportement du premier appel à print via le paramètre optionnel end.\nPar défaut, cette valeur est fixée à '\\n', soit un retour à la ligne.\nNous l’avons modifié dans la deuxième cellule à un espace, d’où la différence de résultat.\nNous allons maintenant créer une fonction avec un argument optionnel.\nPour expliquer le comportement de cette méthode, une documentation a été ajoutée entre les caractères '''.\n\ndef note_finale(note1, note2, bonus=0):\n    '''Fonction d'ajout de 2 notes\n    Parameters\n    ----------\n        note1 : float\n            la première note\n        note2 : float\n            la deuxième note\n        bonus : float\n            un bonus (optionnel, par défaut égal à 0)\n    Returns\n    -------\n        float : sommes des 2 notes et du bonus\n    '''\n    return note1 + note2 + bonus\n\n\n# Comportement par défaut (bonus=0)\nnote_finale(8.5, 7)  \n\n\n# Comportement modifié\nnote_finale(8.5, 7, bonus = 2)  \n\n\n\nBonus : nombre d’arguments variable\n\nLa notation *args permet à une fonction de recevoir un nombre variable d’arguments positionnels\nLa notation **kwargs permet à une fonction de recevoir un nombre variable d’arguments clé-valeur\n\n\n# Exemple d'utilisation de args\n\ndef moyenne(*args):\n    somme = 0\n    nb = 0\n    for a in args:\n        somme += a\n        nb += 1\n    print(f\"Moyenne de {args} : {somme / nb}\")\n\nmoyenne(10, 15)\nmoyenne(8, 20, 16, 12)\n\n\n# Exemple d'utilisation de kwargs\n\ndef recette(**kwargs):\n    for a in kwargs:\n        # get argument name\n        arg_name = a\n        # get argument value\n        arg_value = kwargs[arg_name]\n        print(arg_name, \" = \", arg_value)\n    \n    \nrecette(tomate=2, farine=\"100g\", sel=True)\n\n\n\n\n1.2 Résultats\n\nPrincipe\nOn a vu :\n\nque toute fonction renvoie un résultat en sortie\nque l’instruction return permet de spécifier ce résultat\n\nLorsque la fonction est appelée, elle est évaluée à la valeur spécifiée par return, et cette valeur peut alors être récupérée dans une variable et utilisée dans des calculs ultérieurs, et ainsi de suite.\n\ndef division(x, y):\n    return x / y\n\n\na = division(4, 2)\nb = division(9, 3)\ndivision(a, b)  # 2 / 3\n\nRemarque importante : lorsqu’une instruction return est atteinte dans une fonction, le reste de la fonction n’est pas exécuté.\n\ndef test(x):\n    return x\n    print(\"vais-je être affiché ?\")\n    \ntest(3)\n\n\n\nRenvoyer plusieurs résultats\nUne fonction renvoie par définition un résultat, qui peut être tout objet Python. Comment faire si l’on souhaite renvoyer plusieurs résultats ? On peut simplement enregistrer les différents résultats dans un conteneur (liste, tuple, dictionnaire, etc.), qui peut lui contenir un grand nombre d’objets.\n\ndef calculs_mathematiques(a, b):\n    somme = a + b\n    difference = a - b\n    produit = a * b\n    return somme, difference, produit\n\nresultats = calculs_mathematiques(10, 5)\n\nprint(resultats)\ntype(resultats)\n\nPar défaut, les retours multiples sont des tuples.\nMais il est également possible de retourner une liste ou un dictionnaire.\n\ndef puissance_liste(a):\n    return [a**2, a**3]\n\npuissance_liste(4)\n\n\ndef puissance_dico(nombre):\n    carre = nombre ** 2\n    cube = nombre ** 3\n    return {\"carre\": a**2, \"cube\": a**3}\n\npuissance_dico(4)\n\n\n\n\n1.3 Lambda fonctions\nIl existe une autre manière concise de définir une fonction simple, la lambda fonction.\n\ncarre = lambda x: x**2\n\ncarre(6)"
  },
  {
    "objectID": "docs/python/04-fonctions.html#exercices",
    "href": "docs/python/04-fonctions.html#exercices",
    "title": "Les fonctions",
    "section": "2 Exercices",
    "text": "2 Exercices\n\n2.1 Exercice 1\nCréer une fonction puissance qui prend en entrée deux nombres x et y et renvoie la fonction puissance \\(x^y\\).\n\n# Testez votre réponse dans cette cellule\n\n\n\n2.2 Exercice 2\nÉcrire une fonction statistiques_descriptives qui :\n\nprend en entrée une liste de nombre\nrenvoie la moyenne et la variance\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n2.3 Exercice 3\nÉcrire une fonction est_pair qui :\n\nprend en entrée un paramètre\nretourne un booléen pour dire si ce paramètre est pair\n\nAjouter un test pour vérifier que le paramètre est un entier.\n\n# Testez votre réponse dans cette cellule\n\n\n\n2.4 Exercice 4\nÉcrire une fonction qui :\n\nprend en entrée une liste d’éléments quelconques\nrenvoie une nouvelle liste constituée des éléments uniques de la liste initiale\npermet via un paramètre optionnel de trier ou non la liste finale par ordre alphanumérique (le comportement par défaut est de ne pas trier).\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n2.5 Exercice 5\nLes fonctions récursives sont des fonctions qui s’appellent elles-mêmes dans le corps de la fonction, ce qui entraîne des appels infinis jusqu’à atteindre un critère d’arrêt (voir exemple du triangle de Pascal ci-dessous).\nCoder de manière récursive la fonction factoriel.\n\ndef triangle_pascal(n):\n    if n == 0:\n        return [[1]]                                          # Condition d'arrêt\n    else:\n        triangle = triangle_pascal(n - 1)                     # Appel récursif pour obtenir les lignes précédentes\n        prev_row = triangle[-1]                               # Récupérer la dernière ligne générée\n        new_row = [1]                                         # Premier élément de la nouvelle ligne\n        # Calculer les éléments de la nouvelle ligne\n        for i in range(len(prev_row) - 1):\n            new_row.append(prev_row[i] + prev_row[i + 1])  \n        new_row.append(1)                                     # Dernier élément de la nouvelle ligne\n        triangle.append(new_row)                              # Ajouter la nouvelle ligne au triangle\n        return triangle\n\nprint('\\n'.join(['\\t'.join(map(str, row)) for row in triangle_pascal(10)]))\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n2.6 Exercice 6\nÉcrire une fonction appliquer_fonction_liste qui :\n\nprend en paramètre :\n\nune liste d’entiers\nune fonction\n\nretourne la liste à laquelle on a appliqué la fonction\n\nExemple :\nappliquer_fonction_liste([1, 2, 3, 4], lambda x: x**2) -&gt; [1, 4, 9, 16]\n\n# Testez votre réponse dans cette cellule"
  },
  {
    "objectID": "docs/python/02-listes-et-dictionnaires.html",
    "href": "docs/python/02-listes-et-dictionnaires.html",
    "title": "Listes et Dictionnaires",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/02-listes-et-dictionnaires.html#avant-de-commencer",
    "href": "docs/python/02-listes-et-dictionnaires.html#avant-de-commencer",
    "title": "Listes et Dictionnaires",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/02-listes-et-dictionnaires.html#conteneurs",
    "href": "docs/python/02-listes-et-dictionnaires.html#conteneurs",
    "title": "Listes et Dictionnaires",
    "section": "1 Conteneurs",
    "text": "1 Conteneurs\nIl existe plusieurs structures de données en Python :\n\nListes (list) : collection ordonnée et modifiable d’éléments\nDictionnaires (dict) : collection non ordonnée de paires clé-valeur\nEnsembles (set) : collection non ordonnée d’éléments uniques\nTuples (tuple) : collection ordonnée et immuable d’éléments\n\nNous allons ici nous concentrer sur les deux structures les plus courantes : les listes et les dictionnaires"
  },
  {
    "objectID": "docs/python/02-listes-et-dictionnaires.html#listes",
    "href": "docs/python/02-listes-et-dictionnaires.html#listes",
    "title": "Listes et Dictionnaires",
    "section": "2 Listes",
    "text": "2 Listes\nPropriétés des listes Python :\n\nIndexation : Les éléments d’une liste sont indexés, ce qui signifie qu’ils peuvent être accédés en utilisant leur position dans la liste. L’index du premier élément est 0, et l’index du dernier élément est len(liste) - 1.\nMutable : Les listes sont des objets mutables, ce qui signifie que vous pouvez modifier leurs éléments. Vous pouvez ajouter, supprimer ou modifier des éléments.\nHétérogénéité : Les listes peuvent contenir des éléments de différents types de données : entiers, chaînes de caractères, booléens, voire d’autres listes.\nLongueur variable : Les listes peuvent contenir un nombre variable d’éléments. Elles peuvent être vides (sans éléments) ou contenir un nombre illimité d’éléments.\n\n\n2.1 Créer une liste\n\n# Liste d'entiers\na = [22, 29, 35, 56]\na\n\n\ntype(a)\n\n\n# Liste mixte\nb = [\"bonjour\", 20, True]\nprint(b)\n\n\n# Concaténation\na + b\n\n\n# Répétition\na * 2\n\nIl existe de nombreuses autres possibilités pour créer des listes.\n\nlist(range(1, 7))\n\n\n[x for x in range(1, 7)]\n\n\n# En séparant une chaîne de caractères\nc = \"bleu;blanc;rouge;vert;jaune\"\nc.split(\";\")\n\n\n\n2.2 Méthodes utiles\n\n# Nombre d'éléments\nlen(a)\n\n\n# Premier élément\na[0]\n\n\n# Dernier élément\na[-1]\n\n\n# Tous les éléments à partir de la position 1\na[1:]\n\n\n# Tester si une valeur appartient à une liste\n22 in a\n\n\n# Trouver la position d'un élément\na.index(29)\n\n\n# Inverser une liste (sans modifier la liste d'origine)\nprint(\"a[::-1] : \" + str(a[::-1]))\nprint(\"a :       \" + str(a))\n\n\n# Inverser une liste (ici l'inversion est sauvegardée dans la variable **a** )\na.reverse()\na\n\n\n# Trier une liste (sans modifier la liste d'origine)\nsorted(a)\n\n\n# Order décroissant\nsorted(a, reverse=True)\n\n\n# Trier une liste (en sauvegardant la modification dans la variable **a**)\nprint(\"Avant : \" + str(a))\na.sort()\nprint(\"Après : \" + str(a))\n\n\n\n2.3 Ajouter, modifier et supprimer\n\n# Ajouter à la fin\na.append(44)\na\n\n\n# Insérer à une position précise\na.insert(2, 88)\na\n\n\n# Modifier\na[0] = 99\na\n\n\n# Supprimer par position\na.pop(3)\na\n\n\n# Supprimer par valeur\na.remove(44)\na\n\n\n\n2.4 Copier une liste\nObservez, puis exécutez le code ci-dessous, il contient les instructions suivantes :\n\ncréation de la variable liste\ncréation de la variable copie\nsuppression du dernier élément de copie\naffichage de liste\n\n\nliste = [1, 2, 3, 4]\nliste2 = liste\nliste2.pop()\nliste\n\nNous pourrions nous attendre à ce que la variable liste ne soit pas modifiée et affiche [1, 2, 3, 4].\nPourtant la variable liste2 n’est pas une copie de liste, c’est simplement une autre manière d’appeler la même liste.\n\n# Pour créer une vraie copie qui sera distinct de l'original\ncopie = list(liste)\ncopie.append(9)\nliste, copie\n\n\n# Autre possibilité pour copier\ncp = liste.copy()\ncp.append(8)\nliste, cp"
  },
  {
    "objectID": "docs/python/02-listes-et-dictionnaires.html#dictionnaires",
    "href": "docs/python/02-listes-et-dictionnaires.html#dictionnaires",
    "title": "Listes et Dictionnaires",
    "section": "3 Dictionnaires",
    "text": "3 Dictionnaires\nPropriétés importantes d’un dictionnaire en Python :\n\nIndexation par clé : Les éléments d’un dictionnaire sont indexés par des clés plutôt que par des positions. Chaque clé doit être unique dans le dictionnaire, et elle est associée à une valeur correspondante. La recherche d’une valeur associée à une clé est très rapide.\nMutable : Les dictionnaires sont des objets mutables, ce qui signifie que vous pouvez ajouter, supprimer ou modifier des éléments du dictionnaire après sa création.\nHétérogénéité : Les dictionnaires peuvent contenir des paires clé-valeur avec des types de données différents. Les clés peuvent être de types immuables tels que les chaînes de caractères, les entiers… Les valeurs peuvent être de n’importe quel type de données valide en Python.\nLongueur variable : Les dictionnaires peuvent contenir un nombre variable de paires clé-valeur. Ils peuvent être vides (sans paires clé-valeur) ou contenir un nombre illimité de paires.\nNon ordonné : Contrairement aux listes, les éléments d’un dictionnaire n’ont pas d’ordre défini. L’ordre dans lequel les paires clé-valeur sont stockées n’est pas garanti et peut changer lors des opérations de modification du dictionnaire.\n\n\n3.1 Créer un dictionnaire\n\ningredients = {'sucre': '100g', 'poire': 2, 'lait': '1L', 'sel': True}\ningredients\n\n\ntype(ingredients)\n\n\n# Nombre d'éléments\nlen(ingredients)\n\n\n# Recherche par clé\ningredients['lait']\n\n\n# Recherche par clé - autre possibilité\ningredients.get('lait')\n\n\n\n3.2 Ajouter, modifier et supprimer\n\n# Ajouter un élément\ningredients['fraise'] =  '200g'\ningredients\n\n\n# Modifier\ningredients['sucre'] =  '35g'\ningredients\n\n\n# Supprimer \ningredients.pop('lait')\ningredients\n\n\n\n3.3 Méthodes utiles\n\n# Liste des clés\nlist(ingredients.keys())      # idem : list(ingredients)\n\n\n# Liste des valeurs\nlist(ingredients.values())\n\n\n# Liste des items (liste de tuples)\nlist(ingredients.items())"
  },
  {
    "objectID": "docs/python/02-listes-et-dictionnaires.html#les-types-vide",
    "href": "docs/python/02-listes-et-dictionnaires.html#les-types-vide",
    "title": "Listes et Dictionnaires",
    "section": "4 Les types « vide »",
    "text": "4 Les types « vide »\nMaintenant que nous avons vu les listes et les dictionnaires, nous pouvons parler des types vides.\nPar exemple, il est possible de créer :\n\nune variable qui ne contient rien : None\nune liste vide []\nun dictionnaire vide {}\n\n\nx = None\ntype(x)\n\n\ny = []\ntype(y)\n\n\nz = {}\ntype(z)"
  },
  {
    "objectID": "docs/python/02-listes-et-dictionnaires.html#exercices",
    "href": "docs/python/02-listes-et-dictionnaires.html#exercices",
    "title": "Listes et Dictionnaires",
    "section": "5 Exercices",
    "text": "5 Exercices\n\n5.1 Exercice 1\nEn partant de la liste notes = [\"do\", \"re\", \"re\", \"re\", \"fa\", \"sol\", \"solsi\", \"la\"], ajoutez, supprimez et modifiez des éléments pour qu’elle contienne les notes de musique “do re mi fa sol la si” dans le bon ordre.\n\n# Testez votre réponse dans cette cellule\n\n\n\n5.2 Exercice 2\nProposez deux méthodes pour inverser la liste [\"un\", \"deux\", \"trois\", \"quatre\"]. Quelle est la différence majeure entre les deux méthodes ?\n\n# Testez votre réponse dans cette cellule\n\n\n\n5.3 Exercice 3\nTestez le comportement de la méthode pop sur la liste des entiers de 1 à 9.\nPar exemple, testez pop() sans paramètres ou encore pop(-1).\n\n# Testez votre réponse dans cette cellule\n\n\n\n5.4 Exercice 4\nTestez le comportement des méthodes min et max sur :\n\nsur une liste composée uniquement d’objets numériques (int et float) ;\nsur une liste composée uniquement de chaînes de caractères ;\nsur une liste composée d’un mélange d’objets numériques et textuels.\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n5.5 Exercice 5\nEssayer de créer une liste vide puis vérifiez son type.\nQuel intérêt cela pourrait-il avoir ?\n\n# Testez votre réponse dans cette cellule\n\nExercice Soit le dictionnaire suivant : animaux = {'chats': 5, 'chiens': 12}\nQue vont retourner les tests d’appartenance suivants ? Vérifiez vos prédictions.\n\n'chats' in animaux.keys()\n'chats' in animaux.values()\n'chats' in animaux\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n5.6 Exercice 6\nSoit le dictionnaire défini dans la cellule ci-dessous.\nAffichez à l’aide d’opérations print :\n\nla liste des noms des différentes classes\nla note de Miranda en histoire\nla liste des notes obtenues par Hypolyte\nla liste des noms des élèves de la 6emeB\nla liste des matières enseignées en 6eme A\nla liste de toutes les matières enseignées\nla liste des notes obtenues par les filles des deux classes\n\n\nresultats = {\n    \"6emeA\": {\"Miranda\" : {\"notes\": {\"physique\": 16, \"histoire\": 12}},\n              \"Celestin\": {\"notes\": {\"physique\": \"absent\", \"histoire\": 18}}\n             },\n    \"6emeB\": {\"Hypolyte\": {\"notes\": {\"maths\": 11, \"anglais\": 0}},\n              \"Josephine\": {\"notes\": {\"maths\": 16, \"anglais\": 20}}\n             }\n}\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n5.7 Exercice 7\nÀ l’aide d’un dictionnaire, comptez puis affichez le nombre d’occurences de chaque caractère dans la phrase suivante :\n\nJe compte le nombre d'occurences de chaque caractère de la phrase courante.\n\nAstuce : au préalable, faites un test sur une chaine plus petite.\n\n# Testez votre réponse dans cette cellule\n\n\n\n5.8 Exercice 8\nNettoyer cette liste pour retirer tous les doublons et ne conserver qu’une seule occurence de chaque fruit :\n\nfruits = ['pomme', 'banane', 'orange', 'fraise', 'citron', 'fraise', 'banane', 'orange', 'banane', 'pomme', 'fraise']\n\nIndice : utiliser les set\n\n# Testez votre réponse dans cette cellule"
  },
  {
    "objectID": "docs/outils/outils.html",
    "href": "docs/outils/outils.html",
    "title": "Divers outils",
    "section": "",
    "text": "VM : parler de l’environnement de travail à l’ENSAI\nArborescence : pour bien organiser vos cours\nBookmarks : des favoris à importer dans votre navigateur\nVSCode : un environnement de développement\nUML : une introduction à la modélisation UML\nGit : pour gérer les versions du code\nBash : pour apprendre à utiliser un terminal de commande\nMarkdown : langage de balisage léger et intuitif utilisé pour formater et structurer du texte\n\nHackMd : un éditeur en ligne de Markdown"
  },
  {
    "objectID": "docs/outils/outils.html#outils-présentés-dans-cette-partie",
    "href": "docs/outils/outils.html#outils-présentés-dans-cette-partie",
    "title": "Divers outils",
    "section": "",
    "text": "VM : parler de l’environnement de travail à l’ENSAI\nArborescence : pour bien organiser vos cours\nBookmarks : des favoris à importer dans votre navigateur\nVSCode : un environnement de développement\nUML : une introduction à la modélisation UML\nGit : pour gérer les versions du code\nBash : pour apprendre à utiliser un terminal de commande\nMarkdown : langage de balisage léger et intuitif utilisé pour formater et structurer du texte\n\nHackMd : un éditeur en ligne de Markdown"
  },
  {
    "objectID": "docs/outils/outils.html#autres-outils",
    "href": "docs/outils/outils.html#autres-outils",
    "title": "Divers outils",
    "section": "2 Autres outils",
    "text": "2 Autres outils\n\n\n\nOutil\nIntérêt\n\n\n\n\nChatGPT\nDébugage, Génération de code, Génération de données, Documentation automatique\n\n\nStack Overflow\nTrés nombreuses questions et réponses en informatique\n\n\nJSON Formatter\nOutil en ligne pour formater et visualiser des données JSON\n\n\nDeepL\nOutil de traduction\n\n\nScribens\nCorrecteur grammatical en ligne"
  },
  {
    "objectID": "docs/outils/VM.html",
    "href": "docs/outils/VM.html",
    "title": "VM",
    "section": "",
    "text": "http://view.ensai.fr\ninstaller VMWare Horizon (Recommandé)\nOuvrir VMWare Horizon\n\nAller dans Paramètre &gt; Sécurité &gt; Désactiver la vérification de Certificat\nAjouter un serveur\n\nview.ensai.fr\nsaisir id et mot de passe"
  },
  {
    "objectID": "docs/outils/VM.html#se-connecter-à-distance-la-vm-ensai",
    "href": "docs/outils/VM.html#se-connecter-à-distance-la-vm-ensai",
    "title": "VM",
    "section": "",
    "text": "http://view.ensai.fr\ninstaller VMWare Horizon (Recommandé)\nOuvrir VMWare Horizon\n\nAller dans Paramètre &gt; Sécurité &gt; Désactiver la vérification de Certificat\nAjouter un serveur\n\nview.ensai.fr\nsaisir id et mot de passe"
  },
  {
    "objectID": "docs/outils/VM.html#ctrl-alt-f12",
    "href": "docs/outils/VM.html#ctrl-alt-f12",
    "title": "VM",
    "section": "2 CTRL + ALT + F12",
    "text": "2 CTRL + ALT + F12\n\npour bloquer votre session dès que vous quittez votre poste\nà votre retour, se reconnecter simplement\nla session reste active pendant 3h"
  },
  {
    "objectID": "docs/outils/VM.html#lecteur-p",
    "href": "docs/outils/VM.html#lecteur-p",
    "title": "VM",
    "section": "3 Lecteur P:",
    "text": "3 Lecteur P:\n\nespace Personnel de 2Go\nEnregistrez vos fichiers dans ce lecteur\nfaite des sauvegardes de temps en temps sur clé USB"
  },
  {
    "objectID": "docs/outils/VM.html#disque-plein",
    "href": "docs/outils/VM.html#disque-plein",
    "title": "VM",
    "section": "4 Disque plein",
    "text": "4 Disque plein\n\nSi vous recevez des mails Votre disque est plein à 100%\nSouvent cela est du à des fichiers temporaires qui se créent lorsque vous ouvrez VSCode, Teams…\nPaliatif :\n\nCliquer sur l’icone Windows Démarrer\n2-Accessoires\nlancer les scripts : Nettoyage-profil et Nettoyage-Python"
  },
  {
    "objectID": "docs/outils/VM.html#impression",
    "href": "docs/outils/VM.html#impression",
    "title": "VM",
    "section": "5 Impression",
    "text": "5 Impression\n\nMode opératoire complet : ENT &gt; Assistance &gt; Foire aux questions &gt; Rechercher “imprimer”\nImprimez votre document sur PAPERCUT (imprimante ENSAI salle 113)\nRetenez votre code d’identification à 6 chiffres\nPapercut (ou dans ENT &gt; Impression &gt; Papercut)\nAllez en salle 113\nEntrez votre code d’identification sur l’imprimante\nSélectionnez et libérez vos documents en attente d’impression\nAutre possibilité pour s’identifier auprès de l’imprimante\nEn utilisant votre carte étudiant\n\nSuivre mode opératoire affiché en salle 113"
  },
  {
    "objectID": "docs/outils/Git TP.html",
    "href": "docs/outils/Git TP.html",
    "title": "Git TP",
    "section": "",
    "text": "vous présenter les fonctionnalités de base de Git\nvous faire manipuler les 5 commandes principales (status, add, commit, pull, push)\nvous montrer comment résoudre un conflit\nbonus : retour en arrière, branches…"
  },
  {
    "objectID": "docs/outils/Git TP.html#objectifs",
    "href": "docs/outils/Git TP.html#objectifs",
    "title": "Git TP",
    "section": "",
    "text": "vous présenter les fonctionnalités de base de Git\nvous faire manipuler les 5 commandes principales (status, add, commit, pull, push)\nvous montrer comment résoudre un conflit\nbonus : retour en arrière, branches…"
  },
  {
    "objectID": "docs/outils/Git TP.html#créer-un-projet",
    "href": "docs/outils/Git TP.html#créer-un-projet",
    "title": "Git TP",
    "section": "1 Créer un projet",
    "text": "1 Créer un projet\nℹ️ Ce projet permettra d’héberger le dépôt distant\n\nse connecter à GitLab\nEn haut à gauche, Menu &gt; Projects &gt; Create new project\nCreate blank project\n\nProject name : git-tp\nPublic\nInitialize repository with a README\nCreate Project\n\n\n\n\n1.1 Création du fichier .gitignore\n\n.gitignore est un fichier permettant de dire à Git quels fichiers il &gt; faut ignorer. Par exemple :\n\nsi .gitignore contient *.csv\net sur votre dépôt local, vous avez un fichier resultats.csv\nGit fera comme si ce fichier n’existe pas\nAinsi, ce fichier ne sera jamais poussé vers le dépôt distant\n\n\n\nDans GitLab, sur la page de votre projet\nAller dans Repository &gt; Files\nAu milieu , à droite de git-tp/ cliquer sur l’icone ➕\nNew file\nSelect a template type : .gitignore\nApply a template : Python\nModifier le Commit message\nCommit changes\n\n\n\n\n1.2 Inviter d’autres membres\nVous venez de créer un projet public donc visible par tous. Cependant, vous êtes seul à pouvoir modifier ce projet. Pour autoriser d’autres personnes à écrire sur ce projet (par exemple lors du projet info), il faut donner les droits en écriture :\n\nProject informations &gt; Members &gt; Invite members\nRole : Maintainer or Owner\n\nCependant ce n’est pas nécessaire dans le cadre de ce TP, vous pouvez donc passer à la suite."
  },
  {
    "objectID": "docs/outils/Git TP.html#cloner-le-projet",
    "href": "docs/outils/Git TP.html#cloner-le-projet",
    "title": "Git TP",
    "section": "2 Cloner le projet",
    "text": "2 Cloner le projet\nℹ️ Le but de cette étape est de créer votre dépôt local en faisant un clone du dépôt distant\n\nOuvrir Visual Studio Code\nOuvrir un Terminal\nOuvrir un Terminal Git Bash\n\nEn haut à droite du terminal, à coté du +, cliquer sur la flèche vers le bas ˅\n\nCréer le dossier ci-dessous s’il n’existe pas déjà\n\nmkdir \"P:\\Cours\\Python\"\n\nSe positionner dans ce dossier\n\ncd \"P:\\Cours\\Python\"\n\nCloner le projet\n\ngit clone git@gitlab.com:???????/git-tp.git\n\nRemplacer les ?????? par votre nom d’utilisateur GitLab\nOu sinon sur la page GitLab du projet\n\ncliquer sur Clone\ncopier la ligne qui commence par git@gitlab...\n\n\nAre you sure you want to continue connecting (yes/no)?\n\ntaper yes puis ENTREE\n\nVotre dépôt local est maintenant créé\n\nOuvrir ce dépôt dans l’explorateur VSCode\n\nFile &gt; Open Folder\ngit-tp\n\nRéouvrir le terminal Git Bash\n\nSi ce n’est pas le cas, se positionner dans le dossier suivant :\n\ncd \"P:\\Cours\\Python\\git-tp\"\n\nun (main) apparait dans le terminal, cela signifie bien que vous êtes dans un dépôt Git"
  },
  {
    "objectID": "docs/outils/Git TP.html#ajouter-un-nouveau-fichier",
    "href": "docs/outils/Git TP.html#ajouter-un-nouveau-fichier",
    "title": "Git TP",
    "section": "3 Ajouter un nouveau fichier",
    "text": "3 Ajouter un nouveau fichier\nℹ️ Nous allons ici voir comment :\n\najouter/modifier des fichiers dans le dépôt local\nenvoyer ces mises à jour au dépôt distant\n\nDans le dossier git-tp, créer un fichier voiture.py contenant le code suivant :\nclass Voiture:\n    \n    def __init__(self, nom, couleur):\n        self.couleur = couleur\n        self.nom = nom\n        self.vitesse = 0\n\n    def accelere(self, increment):\n        if increment &gt; 10:\n            increment = 10\n        self.vitesse = min(130, self.vitesse + increment)\n\nDans le terminal Git Bash, exécuter les commandes suivantes :\ngit status\n\nLe fichier apparait dans les Untracked files\nCela siginifie que Git a repéré ce fichier mais pour le moment il ne le versionnera pas\n\ngit add voiture.py\n\npour dire à Git de suivre ce fichier\n\ngit status\n\nmaintenant le fichier est reconnu par Git\n\ngit commit -m \"creation classe voiture\"\n\npour créer un point de sauvegarde\nEntre les \" \", mettre un message court et explicite\n\ngit status\n\nYour branch is ahead of ‘origin/main’ by 1 commit\nCe qui signifie que votre dépôt local est en avance d’un commit par rapport au dépôt distant\n\ngit pull\n\nAlready up to date\nPour vérifier que le dépôt distant n’a pas été mis à jour\n\ngit push\n\nVérifier qu’il n’y a pas d’erreur\nPour mettre à jour le dépôt distant avec mes modifications locales\n\n\n💡 Combiner les commandes add et commit\nDans le cas d’un nouveau fichier, il faut impérativement enchaîner les deux commandes suivantes pour que Git suive ce fichier :\n\ngit add mon_fichier.py\ngit commit -m \"Creation mon_fichier\"\n\nSi le fichier existait déjà, il est possible de combiner les deux commandes :\n\nen ajoutant au commit un *a qui signifie add\ngit commit -am \"Modification mon_fichier\"\n\n💡 Si vous créez, non pas un mais plusieurs fichiers, vous pouvez utiliser la commande suivante pour tous les faire suivre par Git : git add .\n💡 Il est fortement recommandé de créer des commits très fréquement, par exemple\n\nVous venez de modifier une fonction\nTestez pour vérifier que votre code fonctionne bien\nCréez un commit\nSi jamais par la suite vous “cassez tout” et que plus rien ne marche, il est facile de revenir au dernier commit"
  },
  {
    "objectID": "docs/outils/Git TP.html#gérer-un-conflit",
    "href": "docs/outils/Git TP.html#gérer-un-conflit",
    "title": "Git TP",
    "section": "4 Gérer un conflit",
    "text": "4 Gérer un conflit\n\nDans le monde merveilleux de Git, tout se passe bien quand chacun &gt; travaille sur des fichiers différents. Lorsque deux personnes ont &gt; modifié le même fichier, ça peut se compliquer.\nAu moment de la synchronisation des dépôts, Git va tenter de faire un &gt; auto-merge. Celui-ci fonctionnera bien si par exemple l’une des deux &gt; personnes a modifié le début du fichier et l’autre la fin.\nPar contre, si les modifications concernent le même endroit, Git ne peut &gt; pas décider seul quelle est la bonne version et demande à l’utilisateur &gt; de choisir quelles lignes il souhaite conserver.\n\nNous allons créer artificiellement un conflit, c’est à dire faire comme si 2 personnes avaient modifié le même fichier. Ce cas de figure arrivera inévitablement lorsque vous travaillerez à plusieurs sur un projet.\nIl faut bien avoir en tête qu’un conflit :\n\nce n’est pas grave\nce n’est pas une erreur\nvous n’avez pas tout cassé\n😱 il ne faut pas paniquer, simplement savoir comment le résoudre\n\n\n\nDans GitLab, cliquer sur le fichier voiture.py\nPuis sur la petite flèche après Open in web IDE et Edit\nCliquer sur Edit\n\nRemplacer à la dernière ligne 130 par 110\nCommit changes\nLe fichier a été modifié sur le dépôt distant\n\nDans VSCode, éditer le fichier voiture.py\n\nRemplacer à la dernière ligne 130 par 150 et enregistrer\ngit status\n\nle fichier voiture.py est à l’état modifié\n\ngit commit -am \"Modif vitesse max\"\nLe fichier a été modifié sur le dépôt local\n\ngit push\n\n⚠️ Error : petit piège, il faut toujours faire un pull avant de tenter un push\nLe dépôt distant a été modifié\nJe dois d’abord récupérer ces modifications sur mon dépôt local (pull)\nEnsuite seulement je pourrai mettre à jour le dépôt distant (push)\n\ngit pull\n\n🚨 Conflict - Automatic merge failed\nSur les 2 dépôts, la même ligne a été modifiée\n\nAinsi dans le cas présent, Git ne peut pas savoir quelle version choisir\n\ndans le terminal Git est au statut (main|MERGING)\n\ngit status\n\nboth modified: voiture.py\n\nDans VSCode, ouvrir le fichier voiture.py, on voit s’afficher :\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n        self.vitesse = min(150, self.vitesse + increment)\n******=\n        self.vitesse = min(110, self.vitesse + increment)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; d29aa04e48e16d3648fd4ae9796b4a035e176f1c\n\nMaintenant il faut choisir quelle ligne on garde\n\nCelle du dessus est la notre (dépôt local)\nCelle du dessous est celle telle qu’elle a été modifiée sur le dépôt distant\n\nSupprimer la ligne avec le 110, ainsi que les lignes avec &lt;&lt;&lt;&lt;&lt;, ****= et &gt;&gt;&gt;&gt;&gt;\n\nOu cliquer simplement sur le bouton VSCode Accept Current Change\nEnregistrer\n\n💡 En théorie, à cet instant, il faut tester de nouveau que le programme fonctionne bien, cependant ce n’est pas l’objet de ce TP\ngit commit -am \"Resolve merge\"\n\ncela crée un nouveau point de sauvegarde pour valider le merge\ndans le terminal Git repasse au statut (main)\n\ngit status\ngit push\n\ncette fois ci, c’est ok, les modifications faites sur le dépôt local sont poussées vers le dépôt distant\n\n🎉 Félicitations, vous venez de résoudre votre 1er conflit 🍾\n\nc’était pas compliqué, hein ?\n\n\n\nLes parties 3 et 4 sont de très loin les plus importantes. Pour utiliser efficacement Git, il faut impérativement avoir bien compris comment utiliser les 5 commandes principales (status, add, commit ,pull, push) et savoir résoudre des conflits.\nLa suite permet d’aller un peu plus loin si vous commencez à être à l’aise."
  },
  {
    "objectID": "docs/outils/Git TP.html#revenir-en-arrière",
    "href": "docs/outils/Git TP.html#revenir-en-arrière",
    "title": "Git TP",
    "section": "5 Revenir en arrière",
    "text": "5 Revenir en arrière\nℹ️ L’intérêt de versionner est d’avoir la possibilité de revenir en arrière si besoin !\nSoyons clair, revenir en arrière n’est pas une action anodine et nécessite parfois une certaine maîtrise de Git. Nous nous contenterons donc ici de quelques outils de base.\n\n\n5.1 Revenir au dernier commit\nComme souvent avec Git, il y a plusieurs manières de faire, ici nous utiliserons la commande stash\n\nCréer un fichier vehicule.py\nModifier le fichier voiture.py\n\npar exemple en ajoutant toto sur la dernière ligne\n\ngit stash -u\n\nLe fichier vehicule.py a été supprimé\nLe fichier voiture.py est revenu à l’état du dernier commit\n\nil est possible de retrouver les fichiers qui ont été “stashés” (voir commandes stash et pop)\n\n\n\n\n5.2 Consulter l’historique d’un fichier\n\n5.2.1 Dans GitLab, aller sur le fichier voiture.py\n\nCliquer sur History\nCela affiche la liste des commits qui ont mis à jour ce fichier\n\n\n\n5.2.2 Dans Git Bash\n\ngit log voiture.py\n\nCela affiche a peu près la même chose que dans GitLab\n\nFaire ENTREE pour continuer à défiler\nFaire q comme quit pour sortir\n\nMais ce n’est pas très lisible, voire très moche\nHeureusement la commande git log propose de nombreuses options\n\ngit log affiche une liste de commit\n\nPour la suite, nous ne limeterons pas aux commits impactant le fichier voiture.py mais nous afficherons tous les commits\nvous pouvez ajouter à la fin de chaque commande le nom d’un fichier pour se restreindre aux commits sur ce fichier\n\ngit log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=relative\n\nC’est joli, non ?\nMais un peu pénible à retenir, et long à écrire\nC’est ici que l’on présente les alias\n\nVoici deux commandes pour créer les alias nommés arbitrairement bb et cc :\n\ngit config --global alias.bb \"log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=relative\"\ngit config --global alias.cc \"log --all --decorate --oneline --graph\"\nces 2 alias sont à créer une seule fois\néventuellement vous pouvez en créer d’autres, ou les modifier\n\nMaintenant essayez git bb et git cc\n\nC’est de toute beauté !\n\n\n\n\n\n\n5.3 Comparer 2 versions d’un fichier\n\nNoter le numéro d’un commit où vous avez modifié voiture.py\n\ngit bb voiture.py\nen jaune sur 7 caractères alphanumériques\nne choisissez pas le plus récent, sinon il n’y aura aucune différence\n\ngit diff 7539cf7 voiture.py\n\nremplacer 7539cf7 par votre numéro de commit\nvous voyez les différences la version actuelle et une ancienne version\n\ngit diff\n\npour lister toutes les modifications effectuées depuis le dernier commit\ngit diff voiture.py : pour se limiter aux modifications effectuée sur ce fichier\n\n\n\n\n\n5.4 Retour vers le passé\n\nToujours avec le numéro d’un ancien commit\ngit checkout 7539cf7\n\nHEAD is now 7539cf7\nHEAD est un mot que l’on retrouve souvent dans Git\n\non peut le traduire par “tête de lecture”\n\nAu bout de la ligne de commande, ne s’affiche plus (main) mais ((7539cf7...))\nVous voici revenu au code tel qu’il était à l’époque de ce commit\n\ngit checkout main pour revenir au présent\n\n\n\n\n5.5 Annuler un commit\n\nEn fait non, on ne verra pas comment annuler un commit, ni sur le dépôt local, ni sur le dépôt distant. C’est possible mais à vos risques et périls.\nPréférez la méthode un peu archaïque qui consiste à retourner dans le passé pour copier ce qui fonctionnait bien avant.\nEt pour vous faciliter la vie, faites des commits réguliers et ne modifiez pas 50 fichiers dans un commit.\n\n💡 Si à un moment vous avez peur de faire une bétise et de perdre tout votre code (par exemple si une commande Git ne se passe pas comme vous l’aviez prévu), il est tout a fait possible de copier votre dépôt. Votre dépôt local est un dossier, allez dans l’explorateur windows, faites CTRL + C CTRL + V et voila vous avez une copie que vous pouvez garder de coté au cas où ça tourne mal.\n💡 Et surtout n’hésitez pas à demander de l’aide !"
  },
  {
    "objectID": "docs/outils/Git TP.html#fonctionnalités-de-gitlab",
    "href": "docs/outils/Git TP.html#fonctionnalités-de-gitlab",
    "title": "Git TP",
    "section": "6 Fonctionnalités de GitLab",
    "text": "6 Fonctionnalités de GitLab\nGitLab n’est pas seulement un dépôt distant, il y a de nombreuses fonctionnalités interessantes.\n\nIssues : Pour lister et suivre les incidents ou les évolutions du programme\nWiki : Pour créer facilement des pages de documentation en langage markdown\nCI/CD (Continuous Integration/Continuous Delivery) : Cela permet lorsque l’on met à jour le dépôt distant de lancer des tâches automatisées, par exemple pour : tester le code, évaluer la qualité du code, déployer le code sur une machine de production ou de développement…\n\nVoir un exemple avec ce projet"
  },
  {
    "objectID": "docs/outils/Git TP.html#un-petit-exo-dapplication",
    "href": "docs/outils/Git TP.html#un-petit-exo-dapplication",
    "title": "Git TP",
    "section": "7 Un petit exo d’application",
    "text": "7 Un petit exo d’application\n\nRevenez dans VSCode, ouvrez un terminal Git Bash et positionnez votre terminal dans le dossier P:\\Cours\\Python\\git-tp comme cela a été fait au début de la partie 2.\nDans VSCode, sur le constructeur de la classe voiture, mettre la valeur par défaut de couleur à verte : def __init__(self, nom, couleur=verte)\nDans GitLab, faites la même modification sur la classe voiture mais en mettant cette fois-ci la couleur jaune\nCréez un nouveau fichier velo.py en copiant le contenu du fichier voiture.py\nModifier la méthode accelere() de velo.py pour avoir une vitesse maximale de 80\nCréer un point de sauvegarde sur votre dépôt local (add et commit)\nSynchronisez vos dépôts et résolvez les conflits (pull et push)"
  },
  {
    "objectID": "docs/outils/Git TP.html#les-branches",
    "href": "docs/outils/Git TP.html#les-branches",
    "title": "Git TP",
    "section": "8 Les branches",
    "text": "8 Les branches\nℹ️ Uniquement si vous êtes à l’aise\n\n8.1 A quoi sert une branche ?\nImaginez vous avez votre code qui fonctionne bien mais qui est tout moche (avec des duplications…). Comme vous êtes sérieux, vous voulez faire tout bien comme il faut et mettre tout au propre.\nVous faites vos corrections, faites de commits, et puis à un moment vous en avez marre car plus rien ne fonctionne. Vous avez envie de retourner en arrière, ce qui est possible avec ce que l’on a vu précédemment mais pas trivial ni très propre.\nSi vous connaissiez les branches voici ce que vous auriez fait :\n\ncréer une branche nommée “refonte”\nDévelopper, Commiter sur cette branche\nSi à la fin ce que vous avez fait sur cette branche vous plait alors fusion de cette branche avec la branche principale main\nSinon vous pouvez simplement supprimer cette branche\n\nEn gros une branche permet de coder et/ou tester une nouvelle fonctionnalité sans polluer la branche principale.\n\n\n\n8.2 Un petit exemple pour y voir plus clair\n\nimaginons que vous voulez ajouter une classe trottinette, mais vous n’êtes pas encore sûr, alors vous testez sur une branche\ngit checkout -b trottinette\n\ncréation d’une branche trottinette\nSwitched to a new branch ‘trottinette’\n\net comme l’indique le message, avec cette commande vous êtes directement positionné sur cette branche\n\n\nCréez un fichier trottinette.py\nModifiez la vitesse de voiture à 210 parce que vous êtes un malade\nadd puis commit\ngit push pour partager sur le dépôt distant\n\nGit dit que cette branche n’est pas connue sur le dépôt distant\nMais comme il est sympa, il donne la commande pour la créer\ngit push --set-upstream origin trottinette\n\nEnsuite revenons sur la branche principale main\n\ngit checkout main\n\nModifiez la vitesse maximale de voiture à 90 parce qu’en fait vous êtes très prudent puis commit\nMaintenant, après mûre réflexion, vous vous dites que la trottinette c’est trop bien et qu’il faut l’intégrer à la branche main\nVous avec envie de fusionner directement les branches trottinette et main\n\ngit merge trottinette\nSeulement il y a un conflit et c’est fait exprés\nIl a été dit plus haut que la branche main doit rester le plus propre possible, ainsi on va éviter de la polluer avec des commits de gestion de conflit. Les conflits doivent être réglé sur les autres branches\nAnnulons ce merge\n\ngit merge --abort\n\n\nVoici comment nous allons procéder pour faire cela proprement\n\nOn retourne sur la branche trottinette\n\ngit checkout trottinette\n\nNous allons faire la fusion sur cette branche\n\ngit merge main\nnous résolvons le conflit puis commit\n\nMaintenant que les 2 branches sont synchronisées, retournons sur la branche main\n\ngit checkout main\ngit merge --squash trottinette\n\ncette fois-ci pas de conflits car ils ont été résolu juste avant\n\ngit commit -am \"ajout fonctionnalité trottinette\"\n\nL’option --squash permet de ne pas polluer le main avec tous les commits réalisés sur la branche trottinette. Si par la suite vous utilisez GitLab ou GitHub cette option se retrouve directement dans les merge ou les pull requests."
  },
  {
    "objectID": "docs/POO/POO.html",
    "href": "docs/POO/POO.html",
    "title": "Programmation Orientée Objet",
    "section": "",
    "text": "Nous allons introduire les notions suivantes :"
  },
  {
    "objectID": "docs/POO/POO.html#introduction",
    "href": "docs/POO/POO.html#introduction",
    "title": "Programmation Orientée Objet",
    "section": "Introduction",
    "text": "Introduction\nLa POO est un paradigme de programmation qui permet d’organiser et de structurer le code en utilisant des objets. Les objets sont des entités qui regroupent des données (attributs) et des actions (méthodes) qui leur sont associées. La POO repose sur plusieurs principes fondamentaux :\n\nEncapsulation : L’encapsulation consiste à regrouper les données et les méthodes qui les manipulent au sein d’un même objet. Cela permet de cacher les détails d’implémentation et de fournir une interface cohérente pour interagir avec l’objet\nHéritage : L’héritage permet de créer de nouvelles classes à partir de classes existantes, en héritant de leurs attributs et méthodes. Cela favorise la réutilisation du code et la création d’une hiérarchie de classes\nPolymorphisme : Le polymorphisme permet à des objets de classes différentes de répondre de manière différente à une même action. Cela permet de manipuler des objets de différentes classes de manière uniforme, en utilisant des interfaces communes\n\nLa POO permet :\n\nd’organiser le code de manière plus structurée\nde favoriser la réutilisation et la maintenance du code\nde modéliser les concepts du domaine d’application de manière naturelle\n\nElle est largement utilisée dans de nombreux langages de programmation, dont Python, pour développer des applications complexes et évolutives."
  },
  {
    "objectID": "docs/POO/POO.html#organisation-du-code",
    "href": "docs/POO/POO.html#organisation-du-code",
    "title": "Programmation Orientée Objet",
    "section": "1 Organisation du code",
    "text": "1 Organisation du code\nDans la suite, nous allons organsier notre code de manière logique dans différents modules.\n\nmodule : Les modules d’un programme Python sont ses fichiers sources.\n\n\npaquet : Un paquet (package en anglais) est un ensemble de modules dans le même dossier.\n\n\n1.1 bonne pratique\nA la racine de votre projet, créez les 3 dossiers suivants :\n\nsrc : pour stocker votre code source\ndata : pour vos fichiers de données\ndoc : pour votre documentation\n\n.\n├── data\n│   └── temperatures.csv\n├── doc\n│   ├── suivi.md\n│   └── rapport.tex\n└── src\n    ├── __main__.py\n    ├── package1\n    │   ├── __init__.py\n    │   ├── module1.py\n    │   ├── module2.py\n    └── package2\n        ├── __init__.py\n        ├── module3.py\n        └── subpackage21\n            ├── __init__.py\n            ├── module4.py\n            ├── module5.py\nRemarques importantes :\n\nle fichier __main__.py contient le code à exécuter quand le pacakge est exécuté\nles fichiers __init__.py sont des fichiers qu’il faut créer dans chaque module pour pouvoir les utiliser (c’est comme ça…)\n\nVoici un exemple plus concret :\n.\n└── src\n    ├── __main__.py\n    ├── vehicules\n    │   ├── __init__.py\n    │   ├── deux_roues.py\n    │   ├── velo.py\n    │   └── trottinette.py\n    └── humain\n        ├── __init__.py\n        ├── personne.py\n        └── etudiant.py"
  },
  {
    "objectID": "docs/POO/POO.html#héritage",
    "href": "docs/POO/POO.html#héritage",
    "title": "Programmation Orientée Objet",
    "section": "2 Héritage",
    "text": "2 Héritage\nUn des trois piliers de la POO est l’héritage.\nUne classe enfant peut utiliser tous les attributs et méthode de sa classe parente.\nCe principe d’héritage permet également de mettre en commun des attributs et méthodes pour éviter des duplications de code.\nSupposons que dans notre code, nous voulons gérer des vélos et de trottinettes. L’idée naïve est de créer une classe pour chacun.\nEn réfléchissant un peu, nous nous disons que ces 2 classes ont des attributs et méthodes en commun :\n\ncouleur\nvitesse\naccelerer()\nralentir()\n\nUne idée est de regrouper ces caractéristiques communes dans une classe DeuxRoues. Puis de faire hériter Vélo et Trottinette de DeuxRoues\n\n2.1 Classe Abstraite\nCertaines classes n’ont pas vocation à être instanciée. Par exemple, nous n’allons pas créer d’objets de la classe DeuxRoues. Nous allons directement créer des Velo et des Trottinettes.\nNous pouvons donc définir la classe DeuxRouescomme abstraite\n\nc’est à dire qui ne peut pas être instanciée\ndit autrement : on ne peut pas créer d’objets de cette classe\n\nLa principale utilité des classes abstraites est de définir un contrat pour les classes filles. Elles fournissent une structure et une organisation cohérentes pour les classes qui partagent des caractéristiques communes, tout en permettant une flexibilité pour les implémentations spécifiques à chaque classe fille.\n\nEn Python, la notion de classe abstraite est implémentée grâce au module abc (Abstract Base Classes). Ce module fournit le décorateur @abstractmethod qui permet de déclarer une méthode comme abstraite dans une classe abstraite. Une classe abstraite est définie en héritant de la classe ABC du module abc.\n\n\n\n\n\n\n\nWarning\n\n\n\nclasse mère ne veut pas dire forcément classe abstraite\n\n\nExemple :\n\nConsidérons par exemple une classe VeloElectrique qui hérite de la classe Velo\nCela parait cohérent car un vélo électrique est un vélo (donc hérite de tous ses attributs et méthodes) avec des caractéristiques supplémentaires (batterie, autonomie, puissance…)\nOr ici la classe Velo n’a pas vocation à être abstraite car il n’est pas absurde de créer un objet vélo"
  },
  {
    "objectID": "docs/POO/POO.html#exercices",
    "href": "docs/POO/POO.html#exercices",
    "title": "Programmation Orientée Objet",
    "section": "3 Exercices",
    "text": "3 Exercices\n\n3.1 Avant de commencer\n\nNous n’allons maintenant plus coder dans des Notebooks mais dans l’IDE VSCode\nSuivez les consignes données dans le fichier de paramétrage et d’utilisation de VSCode\nDans src/Python-POO/exercices, créez les 2 dossiers suivants :\n\ngeometrie pour stocker vos classes des exercices 1 et 2\ndomino pour l’exercice 3\n\n\n\n\n3.2 Exercice 1 - Points\nDéfinissez une classe Point pour représenter un point du plan de coordonnées x et y. Coder les méthodes suivantes :\n\n__init__(self, x, y) : constructeur du point avec des coordonnées cartésiennes\nr(self) et t(self) : renvoyant les coordonnées polaires du point\n__str__(self) : pour afficher le Point sous forme de texte, ex : (1.0, 2.4)\ndistance(self, autre_point) : distance avec un autre point\n__eq__(self, autre_point) : renvoi un booléen qui dit si les 2 points sont identiques\nhomothetie(self, k) : appliquant au point une homothétie de centre (0, 0) et de rapport k\ntranslation(self, dx, dy) : appliquant au point une translation de vecteur (dx, dy)\n(bonus) rotation(self, a) : appliquant au point une rotation de centre (0, 0) et d’angle a\n\n\n\n3.3 Exercice 2 - Polygones\n\nCréer une classe Polygones composées d’objets de la classe Point\n\nnous supposerons par la suite que les segments ne se croisent pas\n\nAjouter à cette classe 2 méthodes abstraites aire() et périmètre() qui seront définies dans les classes filles\nCréer les classes Segment, Triangle et Quadrilatere qui héritent de la classe Polygone\n\nvérifier à chaque fois le nombre de points\nDéfinir les méthodes aire() et périmètre() dans ces classes\n\nCréer la classe Rectangle qui hérite de Quadrilatere\n\nvérifier que les 2 cotés opposés sont de même longeur et qu’il y a un angle droit\n\n\nDiagrammes de classe avec Mermaid\nclassDiagram\n    Point --o Polygone\n    Polygone &lt;|-- Segment : 2\n    Polygone &lt;|-- Triangle : 3\n    Polygone &lt;|-- Quadrilatere : 4\n    Quadrilatere &lt;|-- Rectangle\n    class Point{\n        +float x\n        +float y\n        +distance(autre_point)\n    }\n    class Polygone{\n        +liste[Point] liste_points\n        +aire()\n        +perimetre()\n    }\n    class Quadrilatere{\n        +aire()\n        +perimetre()\n    }\n    class Segment{\n        +aire()\n        +perimetre()\n    }\n    class Triangle{\n        +aire()\n        +perimetre()\n    }\n\n\n3.4 Exercice 3 - Domino\nÉcrire une classe Domino avec :\n\n2 attributs entiers entre 1 et 6 : extr_A et extr_B\n__str__() : qui affiche les points présents sur les deux extrémités\nretourne() qui retourne le domino (son extrémité A devient son extrémité B et vice-versa).\naccepte_apres(autre_domino) : vérifie si l’extrémité B du domino courant a la même valeur que l’extrémité A de l’autre domino\n\nMaintenant nous allons essayer de coder un jeu de dominos (pour plus de facilité, il n’y aura qu’un seul joueur et il n’est possible de poser que d’un seul côté, à la fin de la rangée de domino):\n\nÉcrivez une fonction qui génère tous les dominos et renvoie la liste\nÉcrivez une fonction pioche() qui pioche au hasard un domino dans une liste et le retire de cette liste\nÉcrivez une fonction affiche_dominos() qui affiche une liste de dominos\nÉcrivez une fonction domino_posables(dominos_en_main, dominos_poses) qui prend deux listes de dominos en arguments. La fonction retourne la liste des dominos en main qui pourraient être posés après le dernier domino de la liste dominos_poses.\nÉcrivez une fonction jouer() qui :\n\ngénére la liste de tous les dominos\ntire un 1er domino au hasard et le place dans la liste dominos_poses\ndistribue aléatoirement 6 dominos au joueur\naffiche les dominos qu’il peut jouer\nsi aucun domino n’est jouable, lui proposer de piocher\nlui demande lequel il veut jouer (par exemple en lui demandant de saisir le numéro dans la liste de dominos, et quit pour arrêter de jouer)\najoute le domino joué à la liste dominos_poses et le retire de dominos_en_main\n\n\nclassDiagram\n    class Domino{\n        +int sommet_A\n        +int sommet_B\n        +accepte(autre_domino)\n    }"
  },
  {
    "objectID": "docs/UML/UML.html",
    "href": "docs/UML/UML.html",
    "title": "UML",
    "section": "",
    "text": "UML (Unified Modeling Language) est un langage de modélisation graphique largement utilisé dans le domaine de l’ingénierie logicielle. Il fournit un ensemble de notations et de diagrammes standardisés pour représenter visuellement différents aspects d’un système logiciel.\nL’objectif principal d’UML est de faciliter la communication, la compréhension et la documentation des systèmes logiciels complexes. Il permet aux concepteurs, développeurs et parties prenantes de collaborer efficacement en utilisant des diagrammes compréhensibles et normalisés.\nLes 3 principaux diagrammes :"
  },
  {
    "objectID": "docs/UML/UML.html#diagramme-de-cas-dutilisation",
    "href": "docs/UML/UML.html#diagramme-de-cas-dutilisation",
    "title": "UML",
    "section": "1 Diagramme de cas d’utilisation",
    "text": "1 Diagramme de cas d’utilisation\nUn diagramme de cas d’utilisation UML (Unified Modeling Language) est un type de diagramme utilisé pour représenter les interactions entre les acteurs (utilisateurs ou systèmes externes) et le système logiciel. Il met l’accent sur les fonctionnalités fournies par le système du point de vue des utilisateurs.\nUn diagramme de cas d’utilisation se compose de plusieurs éléments clés :\n\nActeur : Un acteur représente un rôle joué par un utilisateur ou un système externe qui interagit avec le système logiciel. Il peut s’agir d’une personne, d’un autre système, d’un périphérique matériel, etc. Les acteurs sont souvent représentés par des silhouettes.\nCas d'utilisation : Un cas d’utilisation représente une fonctionnalité ou une action que le système logiciel fournit à ses acteurs. Il décrit une interaction entre les acteurs et le système pour atteindre un objectif spécifique.\nRelation d'association : Les relations d’association connectent les acteurs aux cas d’utilisation pour montrer quel acteur utilise quel cas d’utilisation.\n\nLes diagrammes de cas d’utilisation UML sont utilisés pour :\n\ncapturer les exigences fonctionnelles du système\nidentifier les acteurs impliqués\ndécrire les interactions entre les acteurs et le système\ndéfinir les fonctionnalités attendues du système\n\nIls aident à communiquer efficacement les besoins des utilisateurs et à guider le processus de développement logiciel en se concentrant sur les objectifs de l’utilisateur final.\n\n1.1 Outils\n\nPlantUML\n\nexemple\n\n\n\n\n1.2 Exemple\n\n\n\n\n\ngraph LR\n\n  player[\",-. \\n`-' \\n/|\\ \\n |\\n/ \\ \\n Player\"]\n  organizer[\",-. \\n`-' \\n/|\\ \\n |\\n/ \\ \\n Organizer\"]\n\n  player --&gt; modifyProfile([Modify Profile])\n  player --&gt; register([Register Tournament])\n  player --&gt; becomeArbiter([Become Arbiter])\n  \n  organizer --&gt; createTournament([Create   Tournament])\n  organizer --&gt; modifyTournament([Modify Tournament])"
  },
  {
    "objectID": "docs/UML/UML.html#diagramme-de-classe",
    "href": "docs/UML/UML.html#diagramme-de-classe",
    "title": "UML",
    "section": "2 Diagramme de classe",
    "text": "2 Diagramme de classe\nUn diagramme de classes UML (Unified Modeling Language) est un type de diagramme utilisé pour représenter la structure statique d’un système logiciel. Il montre les classes du système, leurs attributs, leurs méthodes et les relations entre les classes.\nUn diagramme de classes UML se compose de différentes boîtes représentant les classes, avec des lignes qui connectent ces boîtes pour montrer les relations entre les classes. Voici quelques éléments clés que l’on retrouve généralement dans un diagramme de classes :\n\nClasse : Elle est représentée par une boîte avec trois sections :\n\nle nom de la classe\nles attributs\nles méthodes\n\nRelation d'association : Une relation d’association représente une connexion entre 2 classes. Elle montre que les objets d’une classe sont associés aux objets d’une autre classe. Par exemple, une classe Étudiant peut être associée à une classe Cours via une relation d’association pour indiquer que les étudiants suivent des cours.\nHéritage : Cela permet de modéliser les concepts de généralisation et de spécialisation.\nAgrégation et Composition : Ces relations décrivent la structure des classes et leur association avec d’autres classes.\n\nL’agrégation est une relation où une classe peut être composée d’autres classes, mais ces classes peuvent exister indépendamment\nLa composition est une relation plus forte où une classe est composée d’autres classes, et ces classes n’existent pas sans la classe parente.\n\nMultiplicité : La multiplicité spécifie le nombre d’objets d’une classe associés à un ou plusieurs objets d’une autre classe dans une relation d’association. Elle est représentée par des nombres ou des symboles tels que “0..1”, “1”, “*“, etc.\n\nLes diagrammes de classes UML sont utilisés pour modéliser la structure conceptuelle d’un système logiciel, identifier les classes et leurs relations. Ils fournissent une représentation visuelle et standardisée pour analyser, concevoir et documenter les systèmes orientés objet.\n\n2.1 Outils\n\nPlantUML\n\nexemples\n\nmermaid\n\n\n\n2.2 Exemple\n\n\n\n\n\nclassDiagram\n    class Adresse {\n        +numero: string\n        +rue: string\n        +ville: string\n    }\n\n    class Personne {\n        +nom: string\n        +prenom: string\n        +age: int\n        +demenager()\n    }\n\n    class Conducteur {\n        +no_permis: string\n    }\n\n    class Voiture {\n        +immat : string\n        +vitesse: float\n    }\n\n    class Roue {\n        +taille: string\n    }\n\n    class Carrosserie {\n        +couleur: string\n    }\n\n    Personne \"*\" -- \"1\" Adresse\n    Personne &lt;|-- Conducteur\n    Conducteur \"*\" -- \"*\" Voiture : conduit\n    Voiture o-- Roue\n    Voiture *-- Carrosserie"
  },
  {
    "objectID": "docs/UML/UML.html#exercice",
    "href": "docs/UML/UML.html#exercice",
    "title": "UML",
    "section": "3 Exercice",
    "text": "3 Exercice\nUn Courrier peut être de 2 types : Lettre ou Colis.\nUne Lettre est caractérisée par :\n\npoids (en grammes)\nmode d’expédition (Rapide ou Normal)\nadresse de destination\nformat (A3 ou A4)\n\nUn Colis est caractérisé par :\n\npoids (en grammes)\nmode d’expédition (Rapide ou Normal)\nadresse de destination\nvolume (en litres)\n\nChaque Courrier dispose des méthodes suivantes :\n\n__init__() : un constructeur\n__str__() : une méthode qui retourne une chaine décrivant le Courrier\ncalcul_affranchissement()\n\npour une Lettre : tarif_base + poids * 0.001\n\navec tarif_base = 2€50 pour le format A4 et 3€50 pour le A3\n\npour un colis : volume / 4 + poids * 0.001\nen mode d’expédition rapide, les montants ci-dessus sont doublés\n\n\n\nQuestions\n\nDéfinir le diagramme de classe\nCoder ces classes en Python\n\nExemple de résultat attendu\n&gt;&gt;&gt; l1 = Lettre(\"Bordeaux\", 80, \"normal\", \"A4\")\n&gt;&gt;&gt; print(l1)\nLettre : \n    Adresse destination : Bordeaux\n    Poids : 80 grammes\n    Mode : normal\n    Format : A4\n    Prix du timbre : 2.58 €\n&gt;&gt;&gt; c1 = Colis(\"Rennes\", 3500, \"rapide\", 2.25)\n&gt;&gt;&gt; print(c1)\nColis : \n    Adresse destination : Rennes \n    Poids : 3500 grammes \n    Mode : rapide \n    Volume : 2.25 litres \n    Prix du timbre : 8.12 €\nLa correction est disponible ici"
  },
  {
    "objectID": "docs/outils/Git.html",
    "href": "docs/outils/Git.html",
    "title": "Git",
    "section": "",
    "text": "Comprendre le principe et l’utilité de Git\nConfigurer Git\nCréer un compte GitLab\npuis dans le fichier Git TP :\n\nManipuler avec les commandes de base (clone, status, add, commit, pull, push)\nGérer un conflit\n\n\n\n\n\n\nFormation Git du Lab INSEE\nBonnes pratiques Git"
  },
  {
    "objectID": "docs/outils/Git.html#objectifs",
    "href": "docs/outils/Git.html#objectifs",
    "title": "Git",
    "section": "",
    "text": "Comprendre le principe et l’utilité de Git\nConfigurer Git\nCréer un compte GitLab\npuis dans le fichier Git TP :\n\nManipuler avec les commandes de base (clone, status, add, commit, pull, push)\nGérer un conflit\n\n\n\n\n\n\nFormation Git du Lab INSEE\nBonnes pratiques Git"
  },
  {
    "objectID": "docs/outils/Git.html#git-présentation",
    "href": "docs/outils/Git.html#git-présentation",
    "title": "Git",
    "section": "1 Git présentation",
    "text": "1 Git présentation\n\n1.1 Git, ça sert à quoi ?\n\nGit\n\nLogiciel de gestion de versions\nLogiciel libre\ncréé par Linus Torvalds, qui n’est pas n’importe qui : également créateur du noyau Linux\n\nGit Bash\n\nTerminal pour écrire des commandes git\nPossible d’ouvrir via le menu Démarrer, mais aussi inclus dans Visual Studio Code\n\nGitLab / GitHub\n\nLogiciel permettant de gérer des fichiers (dépôt)\nPartagé par plusieurs personnes\nS’utilise avec Git\nPropose d’autres fonctionnalités (wiki, gestion des incidents…)\n\n\n\n\n1.2 Pourquoi utiliser un outil de gestion de version ?\nEst-ce que vous préférez avoir ceci ?\n├───Projet info\n│   ├───Livrables\n│   │   ├───Rapport.tex\n│   │   ├───Rapport_Ludo.tex\n│   │   ├───Rapport_v1.0.tex\n│   │   └───Rapport_v1.2.tex\n│   ├───Rapport_old.tex\n│   ├───Rapport_2022.05.15.tex\n│   └───Rapport_2022.05.15_new.tex\nOu un seul fichier avec accès à l’historique des modifications ?\n├───Projet info\n│   └───Livrables\n│     └───Rapport.tex\n\nHistorique des modifications de Rapport.tex\nDate         Heure   Auteur      Message commit\n----         -----   ------      --------------\n2022.05.29   23h58   bianca      \"Version finale\"\n2022.05.29   23h40   archibald   \"j'avais oublié l'intro\"\n2022.05.29   21h32   tryphon     \"ajout partie 2\"\n2022.05.29   20h25   bianca      \"v1.1\"\n2022.05.29   20h12   tryphon     \"Création du rapport\"\nGit permet de créer des points de sauvegardes (commit). Ainsi pour chaque fichier il est possible de consulter une version précédente et éventuellement de revenir en arrière en cas d’erreur.\n\n\n1.3 Principe général de Git\n\nAvec Git, vous allez avoir plusieurs dépôts de fichiers\n\nun dépôt commun (dépôt distant)\nun dépôt par contributeur (dépôts locaux)\n\nGit va aider synchroniser ces dépôts\n\nla synchronisation n’est pas automatique\nc’est à vous de dire quand vous voulez le faire avec des commandes git\n\n\n\n\n1.4 Exemples\n\nExemple 1\n\nSi sur le dépôt distant, le fichier soleil.txt a été créé par une autre personne\nLa commande git pull permet de mettre à jour son dépôt local\nLe fichier soleil.txt apparait sur votre dépôt local\n\n\n\nExemple 2\n\nEn local, vous avez créé le fichier temple.py et modifié le fichier soleil.txt\nFaites git add . pour les faire reconnaitre par Git\nCréez un point de sauvegarde avec la commande git commit\nPuis, la commande git push permet de partager cette nouvelle version sur le dépôt distant\nSur le dépôt distant, les 2 fichiers seront créés ou mis à jour\n\nPour gérer les versions, Git utilise des points de sauvegarde appelés commits. Grace à cela, il est possible de consulter les versions antérieures des fichiers.\n\n\n\n1.5 Les 5 commandes qu’il faudra retenir\n\ngit status : voir où l’on en est\ngit add : ajouter de nouveaux fichiers dans le dépôt\ngit commit : créer un point de sauvegarde\ngit pull : mettre à jour son dépôt local en synchronisant avec le dépôt distant\ngit push : mettre à jour le dépôt distant avec les modifications faites en local\n\n\n\n1.6 Schéma simplifié des liens entre dépôt local et dépôt distant\n\n\nGit distingue plusieurs états de votre dépôt local mais vous pouvez considérer que les 3 dépôts de gauche forment votre dépôt local\nComme visible sur le schéma la commande git commit -a permet de combiner les 2 commandes add et commit en une seule"
  },
  {
    "objectID": "docs/outils/Git.html#paramètrer-git",
    "href": "docs/outils/Git.html#paramètrer-git",
    "title": "Git",
    "section": "2 Paramètrer Git",
    "text": "2 Paramètrer Git\n\n\n\n\n\n\nNote\n\n\n\nLe paramètrage de Git n’est pas très drôle et peut faire un peu peur. Mais pas de panique, c’est à faire une et une seule fois sur votre machine !\n\n\n\n2.1 Configuration Git Bash\nGit Bash est un Terminal où l’on peut écrire des commandes git.\nOuvrir Git Bash et entrer une à une les commandes suivantes\ngit config --global user.name \"Prenom Nom\"\ngit config --global user.email prenom.nom@eleve.ensai.fr\ngit config -l\nLa dernière commande permet de vérifier que les 2 attributs user.name et user.email sont bien renseignés\n\n\n2.2 Clé SSH\nAfin de pouvoir faire des mises à jour sur le dépôt distant, il faut que votre machine (locale) soit reconnue. Vous devez donc fournir une clé d’authentification à GitLab.\nToujours dans Git Bash, lancer une à une ces 2 commandes. La première commande permet de générer une clé publique SSH. La seconde permet de récupérer la valeur de cette clé.\nssh-keygen -t rsa -b 4096 -C \"prenom.nom@eleve.ensai.fr\"\n\n## tapez ENTREE à chaque question\n\n## Récupérez le contenu de la clé avec l'une de ces 2 commandes\ncat $HOME/.ssh/id_rsa.pub \n## ou avec\ncat /c/Users/idxxxx/.ssh/id_rsa.pub\n\nLa commande cat renvoie tout le contenu de ce fichier\n\nEn cas d’échec, vous pouvez aller dans le dossier caché C:/Users/idxxxx/.ssh/ et ouvrir avec Notepad le fichier id_rsa.pub\nsi vous ne trouvez toujours pas le fichier id_rsa.pub, retournez voir le résultat de la commande ssh-keygen, il est écrit dans quel dossier la clé a été générée\n\nSélectionner ce contenu et le copier dans notepad pour la prochaine étape\n\n\nCréez une copie de votre clé\nIl arrive que le dossier C:/Users/idxxxx/.ssh soit supprimé.\nIl est interessant d’avoir une copie de cette clé pour la restaurer si besoin.\n\ncp -r $HOME/.ssh /p pour copier le dossier dans le disque P:\n\n\n\n\n\n2.3 Créer un compte sur GitLab, GitHub ou autre\n\nGitLab est le site qui permet d’héberger le dépôt distant du code (Créer un compte )\nGitHub\n\n\n\n2.4 Déclarer votre clé publique SSH à GitLab\n\nDans GitLab, aller dans Preferences (en haut à droite) puis dans SSH Keys\n\nKey : coller le résultat de l’étape 2\nAdd SSH Key\n\nDans GitHub, aller dans Paramètres, puis SSH and GPG Keys\n\nNew SSh key\ndonnez un titre et coller dans Key le résultat de l’étape 2\n\n\n🌈 Bravo le paramètrage est terminé 🎊\n\n\n2.5 En cas d’erreurs\n\nThe authenticity of host xxx can’t be established\nThe authenticity of host 'github.com (140.82.121.4)' can't be established.  \nED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'github.com' (ED25519) to the list of known hosts.\ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.    \n\nPlease make sure you have the correct access rights\nand the repository exists.\n\nVérifiez que le dossier C:/users/idxxxx/.ssh existe et contient les fichiers id_rsa et id_rsa.pub. Si oui passer à l’étape 2.\n\nSi non, recopiez votre clé dans C:/users/idxxxx/.ssh à partir de la sauvegarde que vous avez faite dans P:/.ssh lors de la création de la clé. Pour automatiser ceci, vous pouvez créer un script restore_ssh.bat sur le bureau contenant le code ci-dessous :\nset \"source=P:\\.ssh\"\nset \"destination=%HOME%\\.ssh\"\nxcopy /E /H /I /Y \"%source%\" \"%destination%\"\npause\n\nVérifiez que la clé id_rsa.pub est bien déclarée dans GitLab ou GitHub. Si le problème persiste, regénérez une nouvelle clé ssh et déclarez là dans GitHub ou GitLab."
  },
  {
    "objectID": "docs/outils/VSCode.html",
    "href": "docs/outils/VSCode.html",
    "title": "Visual Studio Code",
    "section": "",
    "text": "Visual Studio Code est un logiciel qui permet d’éditer du code et propose de nombreuses extensions.\nLe but de cette fiche est de :"
  },
  {
    "objectID": "docs/outils/VSCode.html#paramétrage",
    "href": "docs/outils/VSCode.html#paramétrage",
    "title": "Visual Studio Code",
    "section": "1 Paramétrage",
    "text": "1 Paramétrage\n\n1.1 Extensions\nDe très nombreuses extensions permettent d’améliorer votre utilisation de VSCode. Sur la version utilisées à l’ENSAI, vous pouvez trouver déjà installé :\n\nBlack Formatter\nFlake8\nisort\nPython Test Explorer\n…\nDésactiver l’extension Ruff (elle fait doublon avec Flake8)\n\nAutres extensions interessantes :\n\nBetter Comments\n\n\n\n1.2 Formatage et Linting\n\nUn **formateur*- est un outil qui va mettre en forme votre code pour que ce soit joli et lisible\nun **linter*- est un outil qui va vous avertir si votre code n’est pas joli\n\nex : ligne trop longue, espace manquant ou en trop…\n\n\nLes extensions Black Formatter et Flake8 sont respectivement un formateur et un linter\n\n\n1.3 Settings\nVous pouvez préciser le paramètrage à plusieurs niveaux :\n\nau niveau de l’application VSCode\nau niveau d’un dépôt\n\nLe fichier .vscode/settings.json contient du paramètrage qui va s’appliquer à tous les fichiers du dépôt.\nCe fichier contient par exemple les propriétés ci-dessous :\n    \"flake8.args\": [\n        \"--max-line-length=120\"\n    ],\n    \"[python]\": {\n        \"editor.defaultFormatter\": \"ms-python.black-formatter\",\n        \"editor.formatOnSave\": true,\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 4\n    },"
  },
  {
    "objectID": "docs/outils/VSCode.html#première-utilisation",
    "href": "docs/outils/VSCode.html#première-utilisation",
    "title": "Visual Studio Code",
    "section": "2 Première utilisation",
    "text": "2 Première utilisation\n\nNous allons créer un dépôt local avec Git, puis ouvrir ce dépôt avec VSCode\n\n\nOuvrir Visual Studio Code\nOuvrir un terminal\n\nMenu Terminal &gt; New terminal (raccourci : CTRL + ù)\n\nCréer un dossier pour le Cours\n\nCopier cette commande : mkdir -p /p/Cours2A/UE3_Remise_a_niveau\nDans le terminal, faire clic droit (Coller) puis ENTREE\nVérifier que les dossiers sont bien créés, sinon créer les dossiers à la main\n\nCloner le dépôt\n\nSe postionner dans le dossier créé : cd /p/Cours2A/UE3_Remise_a_niveau\ngit clone https://github.com/ludo2ne/ENSAI-2A-remise-a-niveau.git\n\nOuvrir un espace de travail\n\nDans VSCode : File &gt; Open Folder\nSélectionner le dossier P:/Cours2A/UE3_Remise_a_niveau/ENSAI-2A-remise-a-niveau créé précédemment\nYes i trust…\n\nOuvrir, puis exécuter un fichier Python\n\nOuvrir le fichier Python-POO/exemple/src/__main__.py\nExecuter le fichier\n\nEn haut à droite, cliquer sur l’icone en forme de triangle ▷\nRun python file in terminal\n\nCela ouvre un terminal et exécute le fichier"
  },
  {
    "objectID": "docs/outils/VSCode.html#le-terminal-python",
    "href": "docs/outils/VSCode.html#le-terminal-python",
    "title": "Visual Studio Code",
    "section": "3 Le terminal python",
    "text": "3 Le terminal python\n2 modes :\n\nP:\\Cours\\Python\\tp1&gt;\n\npour éxecuter en totalité un fichier python\n\nen cliquant sur le triangle ▷\nen tapant la commande python bacasable.py\n\ntaper python en ENTREE pour passer à l’autre mode\n\n&gt;&gt;&gt; pour exécuter directement du code python\n\npermet d’exécuter uniquement certaines lignes du fichier\n\nen cliquant sur une ligne puis SHIFT + ENTREE\nen sélectionnant plusieurs lignes puis SHIFT + ENTREE\n\ndans ce mode on peut aussi écrire directement du python dans le terminal\ntaper quit() ou CTRL + Z pour retourner à l’autre mode"
  },
  {
    "objectID": "docs/outils/VSCode.html#python-vscode-et-les-packages",
    "href": "docs/outils/VSCode.html#python-vscode-et-les-packages",
    "title": "Visual Studio Code",
    "section": "4 Python, VSCode et les packages",
    "text": "4 Python, VSCode et les packages\nImaginez que votre code est organisé de la manière ci-dessous\n├───tp1\n│   └───code\n│   │   ├───vehicule\n│   │   │   ├───velo.py\n│   │   │   └───trottinette.py\n│   │   ├───animal\n│   │   │   ├───girafe.py\n│   │   │   └───ane.py\nSi dans la classe Girafe, vous voulez créer un objet de la classe Velo, vous pouvez par exemple faire ceci dans le code de girafe.py :\n\nimport de la classe Velo\npuis création d’un objet Velo\n\nfrom vehicule.velo import Velo\n\nclass Girafe:\n    def __init__(self, nom, nom_moyen_transport):\n        self.nom = nom\n        vehicule = None\n        if nom_moyen_transport * \"velo\":\n            vehicule = Velo()\n        self.moyen_transport = vehicule\n🚨 Cependant, il se peut que que VSCode et/ou le compilateur python n’apprécient pas ce genre d’imports et que vous rencontriez des erreurs du type le module velo n’existe pas\nComme solution de contournement, vous pouvez :\n\nen reprenant l’arborescence ci-dessus,\ndans le dossier code créer un dossier .vscode\ndans ce dossier .vscode, créer le fichier settings.json qui contient ceci :\n\n{\n    \"python.analysis.extraPaths\": [\n        \"./*\"\n    ],\n    \"terminal.integrated.env.windows\": {\n        \"PYTHONPATH\": \"${workspaceFolder}/src\",\n    },\n    \"terminal.integrated.env.linux\": {\n        \"PYTHONPATH\": \"${workspaceFolder}/src\",\n    },\n    \"python.languageServer\": \"Jedi\"\n}\n\npuis fermer et redémarrer VSCode\nFile &gt; Open Folder &gt; C:/.../tp1/code"
  },
  {
    "objectID": "docs/outils/VSCode.html#afficher-les-variables-denvironnement",
    "href": "docs/outils/VSCode.html#afficher-les-variables-denvironnement",
    "title": "Visual Studio Code",
    "section": "5 Afficher les variables d’environnement",
    "text": "5 Afficher les variables d’environnement\nprintenv\necho $PYTHONPATH\necho $HOME"
  },
  {
    "objectID": "docs/python/01-types-et-variables.html",
    "href": "docs/python/01-types-et-variables.html",
    "title": "Types et variables",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/01-types-et-variables.html#avant-de-commencer",
    "href": "docs/python/01-types-et-variables.html#avant-de-commencer",
    "title": "Types et variables",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/01-types-et-variables.html#introduction",
    "href": "docs/python/01-types-et-variables.html#introduction",
    "title": "Types et variables",
    "section": "Introduction",
    "text": "Introduction\nDans ce notebook, nous allons découvrir les types de base en python :\n\nnumériques\n\nint : entiers\nfloat : décimaux\n\nchaines de caractères : str\nbooléens : bool"
  },
  {
    "objectID": "docs/python/01-types-et-variables.html#affectation-de-variables",
    "href": "docs/python/01-types-et-variables.html#affectation-de-variables",
    "title": "Types et variables",
    "section": "1 Affectation de variables",
    "text": "1 Affectation de variables\n\n# Créer la variable a et lui affecter la valeur 8\na = 8\n\n# Créer la variable b et lui affecter la chaîne de caractère \"texte\"\nb = \"texte\"\n\n# Créer la variable c et lui affecter le booléen True\nc = True\n\n\n# Afficher le contenu de a\na\n\nRemarque : Un notebook n’affiche que la dernière valeur qui lui est demandé.\nPour réaliser plusieurs affichage, il faut utiliser la méthode print\n\nprint(a+1)\nprint(b)\nprint(c)\n\nPython est langage typé dynamiquement.\nCela siginifie qu’il est possible de modifier le type d’une variable sans contrainte.\nSi la variable a contient du texte, il est possible de lui affecter ensuite un entier.\n\nprint(a)\na = \"abcd\"\nprint(a)\na = False\nprint(a)\n\nAstuce : Pour afficher toutes les variables créées et leurs valeurs, vous pouvez utiliser la commande %whos\n\n%whos"
  },
  {
    "objectID": "docs/python/01-types-et-variables.html#nombres",
    "href": "docs/python/01-types-et-variables.html#nombres",
    "title": "Types et variables",
    "section": "2 Nombres",
    "text": "2 Nombres\nLa fonction type permet de connaitre le type\n\na = 8\ntype(a)\n\n\nb = 33.5\ntype(b)\n\n\nfloat('inf')\n\n\n2.1 Convertions\nLes fonctions float et int peuvent être utilisées pour passer d’un type à l’autre.\n\n# Conversion en float\nfloat(a)\n\n\n# Conversion en int (partie entière)\nint(b)\n\n\n# Notation scientifique\n2.1e3\n\n\n\n2.2 Opérations arithmétiques de base\n\n# Addition\n1 + 1\n\n\n# Soustraction\n6 - 2\n\n\n# Multiplication\n3 * 4\n\n\n# Division\n11 / 5\n\n\n# Division euclidienne : quotient\n11 // 5\n\n\n# Division euclidienne : reste (modulo)\n11 % 5\n\n\n# Puissance\n2 ** 10\n\n\n# Racine carrée\n36 ** 0.5"
  },
  {
    "objectID": "docs/python/01-types-et-variables.html#chaînes-de-charactères",
    "href": "docs/python/01-types-et-variables.html#chaînes-de-charactères",
    "title": "Types et variables",
    "section": "3 Chaînes de charactères",
    "text": "3 Chaînes de charactères\nLes chaînes de caractères (strings) sont utilisées pour stocker de l’information textuelle.\nUn string se définit en mettant l’information entre apostrophes ' ou entre guillemets \".\n\n3.1 Définition\n\na = 'une chaine de caractères définie avec des apostrophes'\na\n\n\nb = \"une chaine de caractères définie avec des guillemets\"\nb\n\n\n# Pour inclure une apostrophe à l'intérieur de la chaine\n\"j'inclus l'apostrophe\"\n\n\n# Pour inclure des guillemets à l'intérieur de la chaine\n'les \"guillemets\" sont là'\n\n\n\n3.2 Métodes utiles\nVoici un aperçu de quelques méthodes utiles. De nombreuses autres existent (voir documentation officielle)\n\n# Longueur d'une chaîne (nombre de caractères)\nlen(\"J'ai 18 caractères\")\n\n\n# Concaténation\n\"I am\" + \"your father\"\n\" \".join(\"I am\", \"your father\")\n\n\n# Concaténation avec un nombre\nannee = 2\n\"je suis en \" + annee + \"ème année\"\n\nProblème, il faut au préalable convertir le nombre en chaîne de caractères.\nLa méthode str fait le travail.\n\n# Concaténation avec un nombre - après convertion du nombre en string\nannee = 2\n\"je suis en \" + str(annee) + \"ème année\"\n\n\n# Répétition\n\"hop \" * 5\n\n\n# Mettre en majuscules\n\"C'est OK\".upper()\n\n\n# Mettre en minuscules\n\"C'est OK\".lower()\n\n\n# Compter le nombre d'occurences\n\"Mangez cinq fruits et légumes par jour\".count(\"a\")\n\n\n# Créer une liste de mots\n\"Mangez cinq fruits et légumes par jour\".split()\n\n\n# Séparer les mots selon un caractère spécifique\n\"un-deux-trois-soleil\".split(\"-\")\n\n\n# Utiliser les strings comme templates\n\"mon numéro est : {}\".format(\"06 12 34 56 78\")\n\n\n# Commence par ?\n\"vélo\".startswith(\"vé\")\n\n\n# Se termine par ?\n\"vélo\".endswith(\"lo\")\n\n\n\n3.3 Extraire des sous-chaînes\nUne chaîne de caractères est considérée en Python comme une liste de caractères.\nIl est donc possible d’extraire différents éléments de cette liste\n\n# Premier élémént\n\"c'est de toute beauté\"[0]\n\n\n# Deuxième élémént\n\"c'est de toute beauté\"[1]\n\n\n# Dernier élémént\n\"c'est de toute beauté\"[-1]\n\n\n# À partir d'un certain caractère\n\"c'est de toute beauté\"[6:]\n\n\n# Jusqu'à un certain caractère\n\"c'est de toute beauté\"[:8]\n\n\n# Extraire une sous-chaîne\n\"c'est de toute beauté\"[9:14]\n\n\n# Extraire tous les 2 caractères, à partir de la 4 ème position\n\"c'est de toute beauté\"[4::2]\n\n\n# Inverser une chaîne\n\"c'est de toute beauté\"[::-1]\n\n\nCaractères spéciaux\nPour insérer des caractères spéciaux au sein d’une chaîne de caractère, il faut utiliser le caractère d’échappement \\.\n\n\n\nCaractère\nDescription\n\n\n\n\n\\\nCaractère d’échappement\n\n\n\\’\nApostrophe\n\n\n\\”\nGuillemets doubles\n\n\n\\n\nRetour à la ligne\n\n\n\\t\nTabulation horizontale\n\n\n\\r\nRetour chariot\n\n\n\n\nc = \"une chaîne\\nsur 2 lignes\"\nprint(c)\n\n\n# Définir une chaîne de caractères sur plusieurs lignes\nd = \"\"\"une autre \\\"possibilité\\\" pour\navoir une chaîne sur 2 lignes\"\"\"\nprint(d)"
  },
  {
    "objectID": "docs/python/01-types-et-variables.html#boléens",
    "href": "docs/python/01-types-et-variables.html#boléens",
    "title": "Types et variables",
    "section": "4 Boléens",
    "text": "4 Boléens\nLes Booléens ne peuvent prendre que deux valeurs : True et False\nAttention à bien respecter la notation avec la première lettre en majuscule et les autres en minuscule.\n\ntype(True)\n\n\n4.1 Opérateurs de comparaison\n\n\n\nOpérateur\nSignification\n\n\n\n\n==\nEgal à\n\n\n!=\nNon égal à\n\n\n&lt;\nStrictement inférieur à\n\n\n&gt;\nStrictement supérieur à\n\n\n&lt;=\nInférieur ou égal à\n\n\n&gt;=\nSupérieur ou égal à\n\n\n\n\n8 &gt; 5\n\n\n1+1 == 2\n\n\n[1, 2, 3] == [1, 2, 3]\n\n\n\"girafe\" != \"gnou\"\n\n\n# Enchainement d'opérateurs\n1 &lt; 2 == 2 &gt;= 1 != 2\n\n\n\n4.2 Opérateurs and, or, not\n\na = True\nb = False\n\na and b\n\n\na or b\n\n\nnot a\n\n\n(a or b) and (a and not b)"
  },
  {
    "objectID": "docs/python/01-types-et-variables.html#exercices",
    "href": "docs/python/01-types-et-variables.html#exercices",
    "title": "Types et variables",
    "section": "5 Exercices",
    "text": "5 Exercices\n\n5.1 Exercice 1\nCalculer la somme des longueurs des trois chaînes de caractères suivantes :\n\n“une première chaîne”\n“et une deuxième”\n“jamais deux sans trois”\n\n\n# Tapez votre réponse dans cette cellule\n\n\n\n5.2 Exercice 2\nQuel est le type adapté pour définir un code postal ?\nEssayer de définir les codes postaux suivants au format int et au format string :\n\n92120\n02350\n\nQue concluez-vous ?\n\n# Tapez votre réponse dans cette cellule\n\n\n\n5.3 Exercice 3\nCompter le nombre de fois où la lettre e est présente dans la chaîne suivante : Je compte le nombre de e dans cette chaîne de caractères\n\n# Tapez votre réponse dans cette cellule\n\n\n\n5.4 Exercice 4\nRepérer la première position où la lettre e est présente dans la chaîne suivante : “Je fais un comptage des e.”\nIndice : on peut utiliser la méthode built-in find.\n\n# Tapez votre réponse dans cette cellule\n\n\n\n5.5 Exercice 5\nSupprimer les espaces superflus au début et à la fin de la chaîne suivante :\nIndice : on peut utiliser la méthode built-in strip.\n\n# Tapez votre réponse dans cette cellule\na = \"    Un string très mal formatté.         \"\n\n\n\n5.6 Exercice 6\nRéaliser la suite d’opérations suivantes à l’aide des opérateurs d’incrémentation, et imprimer la valeur finale :\n\ninitialiser une variable à 1\nlui soustraire 5\nla multiplier par 4\nlui ajouter 22\n\n\n# Tapez votre réponse dans cette cellule\n\n\n\n5.7 Exercice 7\nConsidérons les deux séquences suivantes :\n\n“nous sommes en”\n“2022”\n\nTrouvez à partir du tutoriel deux manières différentes de les utiliser pour composer la séquence “nous sommes en 2022”.\n\n# Tapez votre réponse dans cette cellule"
  },
  {
    "objectID": "docs/python/03-tests-et-boucles.html",
    "href": "docs/python/03-tests-et-boucles.html",
    "title": "Tests et Boucles",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/03-tests-et-boucles.html#avant-de-commencer",
    "href": "docs/python/03-tests-et-boucles.html#avant-de-commencer",
    "title": "Tests et Boucles",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/03-tests-et-boucles.html#structures-condionnelles-et-boucles",
    "href": "docs/python/03-tests-et-boucles.html#structures-condionnelles-et-boucles",
    "title": "Tests et Boucles",
    "section": "1 Structures condionnelles et boucles",
    "text": "1 Structures condionnelles et boucles\nDans ce Notebook, nous allons aborder les thèmes suivants :\n\nles structures if, else\nla boucle for\nla boucle while\nles instructions break et continue"
  },
  {
    "objectID": "docs/python/03-tests-et-boucles.html#structures-conditionnelles",
    "href": "docs/python/03-tests-et-boucles.html#structures-conditionnelles",
    "title": "Tests et Boucles",
    "section": "2 Structures conditionnelles",
    "text": "2 Structures conditionnelles\nNous allons tester différentes conditions booléennes (voir Notebook 1) en utilisant les mots clés : if, else et elif.\nLe principe est le suivant :\nif condition1:\n    # Bloc de code à exécuter si la condition1 est vraie\nelif condition2:\n    # Bloc de code à exécuter si la condition1 est fausse et condition2 est vraie\nelse:\n    # Bloc de code à exécuter si la condition1 et 2 sont fausses\nRemarques :\n\nil peut y avoir autant de elif que nécessaire (entre 0 et infini)\nle else est facultatif\n\nAttention : Il est important de respecter la syntaxe, en particulier l’indentation !\n\na = 12\n\n# Simple if\nif a &gt; 5:\n    print(\"la variable a({}) est strictement supérieure à 5\".format(a))\n\n\na = 3\n\n# if else\nif a &gt; 5:\n    print(\"la variable a({}) est strictement supérieure à 5\".format(a))\nelse:\n    print(\"la variable a({}) est inférieure ou égale à 5\".format(a))\n\n\nnb_habitants = 750\n\nif nb_habitants &lt; 500:\n    print(\"village\")\nelif nb_habitants &lt; 10000:\n    print(\"ville\")\nelse:\n    print(\"grande ville\")\n\n\n# Conditions multiples\n\nnote_maths = 14\nnote_info = 20\nvalidation_anglais = True\n\nif note_maths &gt; 10 and note_info &gt; 10 and validation_anglais:\n    print(\"Année validée\")\n\n\n# Conditions en cascade\nif note_maths &gt; 10:\n    if note_info &gt; 10:\n        if validation_anglais:\n            print(\"Félicitation, continuez comme ça !\")\n        else:\n            print(\"Work harder\")\n    else:\n        print(\"il y a 10 types de personnes, ceux qui sont bons en info et les autres\")\nelse:\n    print(\"1+1=2\")"
  },
  {
    "objectID": "docs/python/03-tests-et-boucles.html#boucles",
    "href": "docs/python/03-tests-et-boucles.html#boucles",
    "title": "Tests et Boucles",
    "section": "3 Boucles",
    "text": "3 Boucles\nLes boucles sont utiles pour répéter de nombreuses fois la même opération.\nPar exemple si l’on souhaite afficher tous les éléments d’une liste, écrire autant de print qu’il y a d’éléments serait assez pénible.\nComme pour les structures conditionnelles, il est très important de respecter l’indentation !\n\n3.1 La boucle for\nIl y a plusieurs manières d’utiliser la boucle for, voici quelques exemples.\nIl est très fréquent d’utiliser avec les boucles la méthode range(start, stop, step) qui génére une suite d’entiers\n\nstart : Valeur de départ de la séquence (optionnelle). Par défaut, elle est définie à 0.\nstop : Valeur de fin de la séquence (exclue).\nstep : Pas d’incrément (optionnel). Par défaut, il est défini à 1.\n\n\n# Afficher les entiers entre 1 et 6\nfor i in range(1, 6):\n    print(i)\n\n\nfor i in range(6):\n    print(i, i ** 2, sep=\"\\t\")\n\n\n# Parcours d'une liste\npersonnages = [\"Luke\", \"Leia\", \"Han\", \"Obi-Wan\"]\n\nfor p in personnages:\n    print(\"Hello \" + p)\n\n\n# Parcours d'une liste par indice\nfor i in range(len(personnages)):\n    print(\"Personnage \" + str(i) + \" : \" + personnages[i])\n\nLa fonction enumerate() est utilisée pour itérer simultanément sur les indices et les éléments.\nElle permet de générer un tuple(indice, élément)\n\nlist(enumerate(personnages))\n\n\n# Parcours d'une liste en utilisant enumerate\nfor numero, nom in enumerate(personnages):\n    print(\"Personnage \" + str(numero) + \" : \" + nom)\n\n\n# Parcours d'une chaîne de caractères\nfor char in \"Dark Vador\":\n    print(char, end=\" - \")\n\n\nimport time\n\nmessage = \"Salut les lapinous\"\nfor i in range(len(message)):\n    time.sleep(0.5)\n    print(message[i], end=\"\")\n\n\ningredients = {'sucre': '100g', 'poire': 2, 'lait': '1L', 'sel': True}\n\n# Parcours des clés d'un dictionnaire\nfor cle in ingredients:\n    print(cle)\n\n\n\n3.2 La boucle while\nLe principe de la boucle while est le suivant :\n\nune condition d’entrée dans la boucle est définie\ntant que la condition est vérifiée, le code dans la boucle est exécuté\net ainsi de suite, jusqu’à ce que l’on sorte de la boucle (ou que l’on reste coincé dedans à tout jamais…)\n\n\ncpt = 5\nwhile cpt &gt;= 0:\n    print(cpt, end=\"...\")\n    cpt -= 1      # cpt = cpt - 1\nprint(\"Boom\")\n\n\nuser_input = input(\"Entrez un nombre pair : \")\nwhile int(user_input) % 2 != 0:\n    print(\"Ce n'est pas un nombre pair.\")\n    user_input = input(\"Entrez un nombre pair : \")\nprint(\"Merci, vous avez entré un nombre pair.\")\n\n\nCritère d’arrêt\nLa différence principale avec la boucle for est le critère d’arrêt.\nDans une boucle for, ce critère est clair : la boucle itère sur les éléments d’un objet itérable, nécessairement de taille finie.\nAu contraire, dans la boucle while, ce critère peut ne jamais se réaliser et l’on se retrouve alors dans une boucle infinie…\nPar exemple si l’on se trompe dans le nom des indices, voici le résultat :\n\n# Utilisez le bouton \"Stop\" (carré noir) de Jupyter pour arrêter le programme en cours\ni = 1\nj = 1\nwhile i &lt;= 5:\n    j = j + 1\n\nComme i = 1 et ne change jamais, la condition i &lt;= 5 est toujours égale à True\n\nprint(i)\nprint(j)\n\n\n\n\n3.3 L’instruction break\nUne autre possibilité pour sortir d’une boucle for ou while est d’utiliser l’instruction break.\nLe code ci-dessous montre une utilisation de cette instruction :\n\nOn rentre dans une boucle infinie (While true)\nLe seul moyen d’en sortir est de trouver le bon nombre, ce qui nous envoie vers le break\n\nLe code contient également des instructions try et except qui gérent le cas ou la valeur saisie n’est pas numérique.\nRemarque : en cas de boucles imbriquées, le break ne met fin qu’à la boucle de niveau supérieur.\n\nimport random\n\nnombre_aleatoire = random.randint(1, 20)\n\nprint(\"Entrez un nombre entre 1 et 20\")\nwhile True:\n    nombre_saisi = input()\n    try:\n        nombre_saisi = int(nombre_saisi)\n        if nombre_saisi == nombre_aleatoire:\n            break\n        elif nombre_saisi &lt; 1 or nombre_saisi &gt; 20:\n            print(\"Entre 1 et 20 !!!\")        \n        elif nombre_saisi &gt; nombre_aleatoire:\n            print(\"c'est moins\")\n        elif nombre_saisi &lt; nombre_aleatoire:\n            print(\"c'est plus\")\n    except ValueError:\n        print(\"Veuillez entrer un entier valide\")\n        \nprint(\"Félicitations, vous avez trouvé le nombre secret :\", nombre_aleatoire)\n\n\n\n3.4 L’instruction continue\nL’instruction continue permet de passer à l’itération suivante de la boucle.\nDans l’exemple ci-dessus :\n\non rentre dans une boucle infinie\ntant que l’on ne rentre pas le bon prénom, on recommence au début de la boucle\n\npuis on ne sort de la boucle que lorsque l’on a rentré le bon mot de passe\n\n\n\nvotre_prenom = \"alice\"\n\nwhile True:\n    print(\"Veuillez entrer votre prénom.\")\n    prenom = input()\n    if prenom != votre_prenom:\n        continue\n    print(\"Veuillez entrer votre mot de passe.\")\n    mdp = input()\n    if mdp == \"123456\":\n        break\nprint(\"Bienvenue \" + votre_prenom)"
  },
  {
    "objectID": "docs/python/03-tests-et-boucles.html#exercices",
    "href": "docs/python/03-tests-et-boucles.html#exercices",
    "title": "Tests et Boucles",
    "section": "4 Exercices",
    "text": "4 Exercices\n\n4.1 Exercice 1\nEcrire un programme qui calcule la somme des 10 premiers entiers au carré.\nEcrire un programme qui calcule la somme des 5 premiers entiers impairs au carré.\n\n# Testez votre réponse dans cette cellule\n\n\n# Remarque : avec Python il est possible parfois de condenser l'écriture\nsum(i**2 for i in range(1,11) if i%2 == 1)\n\n\n\n4.2 Exercice 2\nRé-écrivez le code ci-dessous à l’aide d’une boucle for.\nIndice : explorez les différentes utilisations de la méthode range()\n\ncpt = 5\nwhile cpt &gt;= 0:\n    print(cpt)\n    cpt -= 1      # cpt = cpt - 1\nprint(\"Boom\")\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n4.3 Exercice 3\nRéécrivez la boucle for suivante à l’aide d’une boucle while.\n\ngamme = ['do', 're', 'mi', 'fa', 'sol', 'la', 'si']\n\nfor i, note in enumerate(gamme):\n    print(\"La note numéro \" + str(i) + \" de la gamme de do majeur est \" + note)\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n4.4 Exercice 4\nTriez la liste ci-dessous à l’aide de 2 boucles for (sans utiliser de méthode toute faite de tri) :\n\nliste = [34, 7, 20, 12, 50, 23, 16, 28, 6, 11, 19, 13, 26, 8, 9]\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n4.5 Exercice 5\nEcrivez un programme permettant de calculer les 10 premiers termes de la suite de Fibonacci à l’aide d’une boucle for.\nMême question avec une boucle while.\nRappel : La suite de Fibonacci se définit de la manière suivante :\n\nles deux premiers nombres sont 0 et 1\nchaque autre nombre de la suite s’obtient en additionnant les deux nombres qui le précèdent\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n4.6 Exercice 6\nCalculer le minimum et le maximum de la série de valeurs suivantes, sans utiliser les fonctions min et max de Python.\nx = [8, 18, 6, 0, 15, 17.5, 9, 1]\n\n# Testez votre réponse dans cette cellule\n\n\n\n4.7 Exercice 7\nÀ l’aide de boucles for et while, parcourez ce dictionnaire et affichez la moyenne de chaque élève.\n\nnotes = {\n    \"Miranda\"  : [16, 5, 8, 12],\n    \"Celestin\" : [19, 1, 7, 10],\n    \"Hypolyte\" : [18, 3, 12],\n    \"Josephine\": [12, 15, 14, 14]\n}\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n4.8 Exercice 8\nCalculer la moyenne et la variance de la série de valeurs suivantes, sans utiliser des fonctions déjà codées :\nx = [8, 18, 6, 0, 15, 17.5, 9, 1]\nPour rappel, les formules sont :\n\nmoyenne : \\[\\bar{x} = {\\frac {1}{n}}\\sum_{i=1}^{n}x_{i}\\]\nvariance : \\[\\sigma^2 = {\\frac {1}{n}}\\sum_{i=1}^{n} (x_{i}-\\bar{x})^2\\]\n\n\n# Testez votre réponse dans cette cellule\n\n\n# Pour vérifier vos résultats\nimport numpy as np\n\n# Create an array of numbers\nx = [8, 18, 6, 0, 15, 17.5, 9, 1]\n\nprint(\"Mean     : \", np.mean(x))\nprint(\"Variance : \", np.var(x))"
  },
  {
    "objectID": "docs/python/05-POO-introduction.html",
    "href": "docs/python/05-POO-introduction.html",
    "title": "Introduction à la POO",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/05-POO-introduction.html#avant-de-commencer",
    "href": "docs/python/05-POO-introduction.html#avant-de-commencer",
    "title": "Introduction à la POO",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/05-POO-introduction.html#la-programmation-orientée-objet",
    "href": "docs/python/05-POO-introduction.html#la-programmation-orientée-objet",
    "title": "Introduction à la POO",
    "section": "1 La programmation orientée objet",
    "text": "1 La programmation orientée objet\nLa Programmation Orientée Objet (POO) est un paradigme de programmation qui permet de structurer les programmes autour d’objets, qui contiennent :\n\ndes attributs (caractéristiques de l’objet)\ndes méthodes (fonctions propres à l’objet)\n\nEn Python, il est possible mais pas obligatoire d’utiliser la POO. Cependant, le fonctionnement interne de Python est fortement teinté de POO.\n\n1.1 « Tout est objet »\nEn Python, tout est un objet (au sens de la POO). Regardons ce que cela signifie en récupérant le type de différents objets que nous avons vus dans les précédents tutoriels.\n\nprint(type(1))\nprint(type(\"bonjour\"))\nprint(type([]))\nprint(type({}))          \nprint(type(lambda x: x**2))\n\n\n\n1.2 Définir ses propres objets\nPour créer un objet, nous avons besoin dans un premier temps d’un modèle : une classe.\nNous pouvons voir la classe comme un « moule » qui permettra ensuite de construire des objets.\nPar exemple, nous créons une classe Velo dont voici la documentation :\n    \"\"\"\n    Classe représentant un vélo.\n\n    Attributs:\n        couleur (str): La couleur du vélo.\n        vitesse (int): La vitesse actuelle du vélo.\n        porte_bagage (bool): Indique si le vélo a un porte-bagage.\n\n    Méthodes:\n        __init__(couleur, porte_bagage=False): Construit un nouvel objet Velo \n        __str__(): représentation en chaîne de caractères d'un objet Velo\n        accelerer(acceleration): Accélère le vélo en ajoutant l'accélération à sa vitesse actuelle.\n        ralentir(deceleration): Ralentit le vélo en soustrayant la décélération de sa vitesse actuelle.\n        installer_porte_bagage(): Installe un porte-bagage sur le vélo en le mettant à True.\n        est_arrete(): Vérifie si le vélo est complètement arrêté.\n\n    \"\"\"\n\nclass Velo:\n    def __init__(self, couleur, porte_bagage=False):\n        self.couleur = couleur\n        self.vitesse = 0\n        self.porte_bagage = porte_bagage\n        \n    def __str__(self):\n        s = \"Je suis un vélo \" + self.couleur + \".\"\n        s += \" Ma vitesse est de : \" + str(self.vitesse) + \".\"\n        if self.porte_bagage:\n            s += \" J'ai un porte-bagages.\"\n        return s\n\n    def accelerer(self, acceleration):\n        self.vitesse += acceleration\n\n    def ralentir(self, deceleration):\n        self.vitesse -= deceleration\n        if self.vitesse &lt; 0:\n            self.vitesse = 0\n\n    def installer_porte_bagage(self):\n        self.porte_bagage = True\n            \n    def est_arrete(self):\n        return self.vitesse == 0\n\nAvec cette classe nous pouvons maintenant créer des instances (objets) de type Velo\n\nv1 = Velo(\"bleu\")\nprint(v1)\n\nv2 = Velo(\"violet\", True)\nprint(v2)\n\n\n## Nous pouvons appliquer les méthodes définies dans la classe à cet objet velo\nv1.accelerer(20)\nv1.installer_porte_bagage()\nprint(v1)\n\nAnalysons la syntaxe de construction d’une classe d’objets :\n\nl’instruction class définit la classe d’objets. Différents objets pourront être créés selon le modèle défini par cette classe.\nPar convention, le nom de la classe doit commencer par une majuscule.\nla classe spécifie un certains nombres de fonctions que l’on appelle méthodes : ce sont des fonctions spécifiques à la classe d’objets définie.\nla méthode __init__, est appelée le constructeur. Elle est obligatoire, sinon il est impossible d’instancier d’objets de la classe.\nElle permet de définir les attributs attachés à cette classe d’objets.\nIl est possible de passer des paramètres au constructeur (ex : couleur) pour définir des attributs propres à une instance de l’objet.\nle constructeur a un paramètre obligatoire : self. C’est une référence aux instances qui vont être créées à partir de cette classe.\nLa syntaxe suivante définit un attribut : self.attribut = valeur.\nLa méthode __str__ (facultative) permet de redéfinir la représentation en chaîne de caractères d’un objet.\nles autres méthodes sont définies par l’utilisateur. Elles prennent également le self en paramètre, pour accéder aux attributs et méthodes.\nComme ce sont des fonctions, elles peuvent également admettre d’autres paramètres.\n\n\n\n1.3 Attributs\nUn attribut est une variable associée à un objet. Un attribut peut contenir n’importe quel objet Python.\n\nAccéder aux attributs\nUne fois que l’objet est instancié, il est possible d’accéder à ses attributs. La syntaxe est simple : instance.attribut.\n\nprint(v1.couleur)\nprint(v2.couleur)\nprint()\nprint(v1.vitesse)\nprint(v2.vitesse)\n\nOn voit bien que les deux instances sont autonomes : bien qu’elles soient du même type, leurs attributs diffèrent.\n\n\nModifier un attribut\nModifier un attribut d’une instance est très simple, la syntaxe est : instance.attribut = nouvelle_valeur.\n\nv2.couleur = \"jaune\"\nprint(v2.couleur)\n\n\n\nAttributs de classe\nChaque instance de Velo a ses propres attributs d’instance (couleur, vitesse, porte_bagage).\nIl est possible d’avoir des attributs communs à tous les Velos : les attributs de classe.\nCréons la classe VeloBis pour illustrer avec un attribut comptant le nombre de VeloBis créés.\n\nclass VeloBis:\n    nb_velos_bis = 0                                       # Attribut de classe pour compter le nombre de VeloBis\n\n    def __init__(self, couleur, porte_bagage=False):\n        self.couleur = couleur\n        self.vitesse = 0\n        self.porte_bagage = porte_bagage\n        VeloBis.nb_velos_bis += 1\n\n\nprint(VeloBis.nb_velos_bis)\nvb1 = VeloBis(\"rose\")\nprint(VeloBis.nb_velos_bis)\nvb2 = VeloBis(\"orange\")\nprint(VeloBis.nb_velos_bis)\n\n\n\n\n1.4 Méthodes\nUne méthode est une fonction associée à un objet. Elle peut utiliser ses attributs, les modifier, et faire intervenir d’autres méthodes de l’objet.\n\nAppeler une méthode\nLa syntaxe pour appeler une méthode d’un objet instancié est la suivante : instance.methode(parametres).\n\nv1.est_arrete()\n\nRemarque : les méthodes n’ont pas d’existence propre en dehors de l’objet.\nNous ne pouvons pas appeler la méthode est_arrete() seule, cela n’a pas de sens.\n\nest_arrete()\n\nRemarque 2 :\n\nle 1er paramètre de chaque méthode d’instance est toujours self pour faire référence à l’objet lui même\nlors des appels aux méthodes, on ne spécifie pas ce paramètre self\n\n\n\nAgir sur les attributs\nTout l’intérêt des méthodes est qu’elles peuvent accéder aux attributs, les modifier et mettre en place des contrôles.\nPar exemple :\n\nsi l’on n’utilise pas les méthodes accelerer et decelerer, il est possible de se retrouver avec une vitesse négative\n\n\nv1.vitesse = -10\nprint(v1)\n\nModifier directement un attribut de cette manière est une mauvaise pratique car on n’effectue aucun contrôle sur ce qui est saisi.\nIl est possible d’aller encore plus loin :\n\nv1.vitesse = \"Jean-Michel\"\nprint(v1)\n\nEn utilisant les méthodes, cela évite de se retrouver dans des situations absurdes ou incohérentes.\n\nv1 = Velo(\"Bleu\")\nv1.accelerer(10)\nprint(v1)\nv1.ralentir(20)\nprint(v1)\n\n\n\n\n1.5 Bonus : la classe Property\nPour écarter tout problème, une solution intéressante est d’utiliser la classe property.\nCette classe property permet sans changer la syntaxe d’accès aux attributs d’appeler des mutateurs.\n\nclass Velo:\n    def __init__(self, couleur, porte_bagage=False):\n        self.couleur = couleur\n        self._vitesse = 0                                    # Attribut privé pour stocker la vitesse\n        self.porte_bagage = porte_bagage\n\n    def __str__(self):\n        s = \"Je suis un vélo \" + self.couleur + \".\"\n        s += \" Ma vitesse est de : \" + str(self.vitesse) + \".\"\n        if self.porte_bagage:\n            s += \" J'ai un porte-bagages.\"\n        return s\n\n    @property\n    def vitesse(self):\n        return self._vitesse\n\n    @vitesse.setter\n    def vitesse(self, nouvelle_vitesse):\n        if nouvelle_vitesse &gt;= 0:\n            self._vitesse = nouvelle_vitesse\n        else:\n            raise ValueError(\"La vitesse doit être un nombre positif.\")\n\n    def installer_porte_bagage(self):\n        self.porte_bagage = True\n\n    def est_arrete(self):\n        return self.vitesse == 0\n\n\nv3 = Velo(\"noir\")\nprint(v3)\nv3.vitesse = 10\nprint(v3)\nv3.vitesse = -20\nprint(v3)"
  },
  {
    "objectID": "docs/python/05-POO-introduction.html#bonnes-pratiques",
    "href": "docs/python/05-POO-introduction.html#bonnes-pratiques",
    "title": "Introduction à la POO",
    "section": "2 Bonnes pratiques",
    "text": "2 Bonnes pratiques\nPour conclure cette introduction au langage Python, voici une liste de bonnes pratiques généralement suivies par les développeurs.\nLe respect de ces pratiques est fortement recommandé et vous aidera à mieux coder.\n\n2.1 Convention de nommage\n\nvariables\n\ndonner des noms explicites (éviter les toto, var1 …)\nen minuscules avec des mots séparés par des underscores (snake_case)\n\nexception pour les variables constantes : utiliser des MAJUSCULES avec des mots séparés par des underscores\n\ncela permet d’avoir un code plus lisible pour vous même et pour les autres\n\nfonctions et méthodes\n\nidem que pour les variables\n\nclasses\n\nutiliser le camelCase : chaque mot commence par une Majuscule.\nex : VeloElectrique\n\n\n\n\n2.2 Indenter correctement le code\nUtilisez une indentation de 4 espaces pour chaque niveau d’indentation.\nL’indentation correcte est essentielle en Python, car elle détermine la structure du code.\n\n\n2.3 Ajouter des commentaires pertinents\nDès qu’il y a un peu de complexité, commentez votre code pour expliquer son fonctionnement.\nAjoutez des docstrings aux fonctions, classes et modules pour expliquer leur fonctionnement, leurs paramètres et leurs valeurs de retour."
  },
  {
    "objectID": "docs/python/05-POO-introduction.html#exercices",
    "href": "docs/python/05-POO-introduction.html#exercices",
    "title": "Introduction à la POO",
    "section": "3 Exercices",
    "text": "3 Exercices\n\n3.1 Exercice 1\nCréez une classe Etudiant avec les attributs :\n\nnom\nage\nliste_notes\n\nAvec les méthodes :\n\ninit() : constructeur\najouter_note() : pour ajouter une nouvelle note à la liste\ncalculer_moyenne() : calculer la moyenne des notes\n\n\n## Testez votre réponse dans cette cellule\n\n\n\n3.2 Exercice 2\nCréer une classe Point qui représente les coordonnées d’un point en 2D.\nAjouter une méthode distance(autre_point) qui calcule la distance avec un autre point.\nCréez une classe Cercle avec les attributs centre (de la classe Point) et rayon.\nAjoutez une méthode calculer_surface() qui renvoie la surface du cercle.\n\n## Testez votre réponse dans cette cellule\n\n\n\n3.3 Exercice 3\nCréez une classe CompteBancaire avec les attributs suivants :\n\ntitulaire : le nom du titulaire du compte (chaîne de caractères)\nsolde : le solde du compte (nombre réel)\n\nLa classe devra avoir les méthodes suivantes :\n\n__init__(self, titulaire) : le constructeur de la classe\ndeposer(self, montant) : une méthode qui permet de déposer un montant sur le compte. Le montant devra être ajouté au solde\nretirer(self, montant) : une méthode qui permet de retirer un montant du compte. Le montant devra être soustrait du solde\nafficher_solde(self) : une méthode qui affiche le solde du compte\ntransferer(autreCompte, montant) qui transfère de l’argent du compte vers l’autre si le solde est suffisant\n\nCréer 2 Comptes et tester les différentes fonctionnalités.\n\n## Testez votre réponse dans cette cellule"
  },
  {
    "objectID": "docs/python/python-notebooks.html",
    "href": "docs/python/python-notebooks.html",
    "title": "Notebooks Python",
    "section": "",
    "text": "Pour découvrir Python, nous allons commencer par coder dans ces 5 notebooks :\n\nLes types et variables\nLes listes et dictionnaires\nLes boucles\nLes fonctions\nIntroduction à la Programmation Orientée Objet\n\nPour réaliser ces notebooks, je me suis inspiré des ressources ci-dessous :\n\nFormation Initiation à Python du SSP Cloud INSEE\nCours de Python dispensés à l’ENSAE par Lino Galiana et Xavier Dupré\nCours de Python de l’Université Paris Cité"
  },
  {
    "objectID": "docs/python/python-notebooks.html#les-notebooks",
    "href": "docs/python/python-notebooks.html#les-notebooks",
    "title": "Notebooks Python",
    "section": "",
    "text": "Pour découvrir Python, nous allons commencer par coder dans ces 5 notebooks :\n\nLes types et variables\nLes listes et dictionnaires\nLes boucles\nLes fonctions\nIntroduction à la Programmation Orientée Objet\n\nPour réaliser ces notebooks, je me suis inspiré des ressources ci-dessous :\n\nFormation Initiation à Python du SSP Cloud INSEE\nCours de Python dispensés à l’ENSAE par Lino Galiana et Xavier Dupré\nCours de Python de l’Université Paris Cité"
  },
  {
    "objectID": "docs/python/python-notebooks.html#utiliser-un-notebook",
    "href": "docs/python/python-notebooks.html#utiliser-un-notebook",
    "title": "Notebooks Python",
    "section": "2 Utiliser un notebook",
    "text": "2 Utiliser un notebook\n\n\n\n\n\n\nMode opératoire\n\n\n\n\nCommencez par vous rendre sur la page de l’un des 5 notebooks cités ci-dessus\nTéléchargez sur votre machine le fichier .ipynb\nConnectez-vous à l’un des services proposés ci-dessous\nUploadez sur ce service le fichier .ipynb\n\n\n\nVous avez plusieurs possibilités pour lancer les notebooks :\n\nUn cluster Jupyter de l’ENSAI ➡️ si vous avez vos idep et mot de passe\nle datalab SSPCloud ➡️ vous pouvez créer un compte avec votre mail ENSAI\n\nSi vous n’avez, ni identifiants, ni mail ENSAI, d’autres solutions existent :\n\nJupyter Lab online\nKaggle notebooks\nGoogle Colab\n\n\nCluster ENSAISSPCloudJupyter Lab onlineColab et Kaggle\n\n\n\nConnectez-vous au cluster Jupyter avec id et mot de passe\nImportez un notebook : en haut à gauche, sous la barre de menu, utilisez la flèche ⬆️\nDans la colonne de gauche :\n\nl’icone en forme de dossier permet d’explorer les fichiers\nl’icone en forme de liste permet d’afficher la table des matières\n\nLe champ Code permet d’indiquer si la cellule attend du code python ou du texte (Markdown)\n\n\n\n\n\nConnectez-vous au SSPCloud\nAllez dans le menu Catalogue de services\nLancer Jupyter-python\nSuivez les mêmes instructions que pour le Cluster ENSAI\n\n\n\n\nAllez sur la page Jupyter Lab online\nSuivez les mêmes instructions que pour le Cluster ENSAI\n\n\n\n\nConnectez-vous au service\nImportez le notebook (Fichier &gt; Importer le notebook)\n\n\n\n\n\n2.1 Types de cellules\nUn notebook est constitué de cellules. Vous pouvez créer une nouvelle cellule en cliquant sur le bouton + dans la barre d’outils.\nIl existe deux types de cellules principaux :\n\nles cellules de code (où vous écrivez et exécutez du code Python)\nles cellules de texte (où vous écrivez du texte formaté en utilisant Markdown)\n\n\n\n\n\n\n\nLe langage Mardown\n\n\n\n\n\nC’est un langage simple et intuitif qui permet de formater du texte (Ce site est généré avec du code markdown).\nDe très nombreuses ressources sont disponibles sur internet.\nQuelques exemples :\n\n\n\nCode\nMise en forme\n\n\n\n\n**texte en gras**\ntexte en gras\n\n\n*texte en italique*\ntexte en italique\n\n\n# Titre de niveau 1\n\n\n\n## Titre de niveau 2\n\n\n\n- Élement de liste à puces\n- Élement de liste à puces\n\n\n\n\n\n\nLe type de cellule souhaité est modifiable dans la barre d’outils."
  },
  {
    "objectID": "docs/python/python-notebooks.html#commandes-utiles",
    "href": "docs/python/python-notebooks.html#commandes-utiles",
    "title": "Notebooks Python",
    "section": "3 Commandes utiles",
    "text": "3 Commandes utiles\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\nSHIFT + ENTER\nExécuter une cellule et passer à la suivante.\n\n\nCTRL + ENTER\nExécuter une cellule sans passer à la suivante.\n\n\nESC\nPasser en mode commande (les bordures de cellule deviennent bleues).\n\n\nENTER\nPasser en mode édition (vous pouvez modifier le contenu de la cellule).\n\n\nA\nInsérer une cellule au-dessus de la cellule courante.\n\n\nB\nInsérer une cellule en dessous de la cellule courante.\n\n\nD + D\nSupprimer une cellule."
  },
  {
    "objectID": "docs/python/python-notebooks.html#ressources-utiles",
    "href": "docs/python/python-notebooks.html#ressources-utiles",
    "title": "Notebooks Python",
    "section": "4 Ressources utiles",
    "text": "4 Ressources utiles\nVous trouverez plus d’informations sur les notebooks, sur le site de la formation INSEE d’initiation à Python."
  },
  {
    "objectID": "docs/sql/sql.html",
    "href": "docs/sql/sql.html",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "",
    "text": "Qu’est ce qu’une base de données relationnelle ?\nComment sont construits les tables ?\nSavoir écrire des requêtes SQL\nUtiliser DBeaver"
  },
  {
    "objectID": "docs/sql/sql.html#objectifs",
    "href": "docs/sql/sql.html#objectifs",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "",
    "text": "Qu’est ce qu’une base de données relationnelle ?\nComment sont construits les tables ?\nSavoir écrire des requêtes SQL\nUtiliser DBeaver"
  },
  {
    "objectID": "docs/sql/sql.html#introduction",
    "href": "docs/sql/sql.html#introduction",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "1 Introduction",
    "text": "1 Introduction\nUne Base de données (BDD) est une collection organisée de données structurées stockées dans des Tables\nUne Table est composée de lignes et de colonnes :\n\nune ligne représente un enregistrement spécifique\nune colonne représente un attribut particulier de ces enregistrements\nClé primaire (PK) : colonne ou un ensemble de colonnes qui identifie de manière unique chaque enregistrement dans une table\n\nUne base de données relationnelle (BDDR) organise les données sous forme de tables interconnectées. Les tables seront liées entre elle grace à des clés étrangères (FK). Il y a trois principaux types d’associations :\n\n1..1 : Une Personne a un Passport et un Passport appartient à une seule Personne\n\nla clé étrangère pourra être placée dans l’une des deux tables\n\n1.. : Une Joueuse joue pour une seule équipe Equipe. Une Equipe est composée de plusieurs Joueuses\n\nla clé étrangère devra être placée dans la table Joueuse\n\n..* : Un Etudiant suit plusieurs Cours et un Cours et suivi par plusieurs Etudiants\n\nil faut créer une table d’association entre Etudiant et Cours\n\n\nUn SGBD (Système de Gestion de Base de Données) est un logiciel qui permet de stocker, organiser et gérer des données de manière structurée\n\nexemples (Bases de données relationnelles) : PostgreSQL, MySQL, Oracle Database\nexemples (Bases de données NoSQL pour le Big Data) : MongoDB, Cassandra\n\nSQL (Structured Query Language) est un langage de programmation conçu pour gérer et manipuler des bases de données relationnelles.\nDBeaver est un outil client qui permet de se connecter à un SGBD."
  },
  {
    "objectID": "docs/sql/sql.html#exemples",
    "href": "docs/sql/sql.html#exemples",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "2 Exemples",
    "text": "2 Exemples\n\nUne simple table\n\n\n\n\n\nclassDiagram\n  class Joueuse {\n    id_joueuse: INT(PK)\n    nom: VARCHAR\n    prenom: VARCHAR\n    pays: VARCHAR\n    date_naissance: DATE\n  }\n\n\n\n\n\n\n\n\n\nid_joueuse\nnom\nprenom\ndate_naissance\npays\n\n\n\n\n1\nSebag\nMarie\n1986-10-15\nFrance\n\n\n2\nPolgar\nJudit\n1976-07-23\nHongrie\n\n\n3\nHou\nYifan\n1994-02-27\nChine\n\n\n4\nKosteniuk\nAlexandra\n1984-04-23\nSuisse\n\n\n5\nJu\nWenjun\n1991-01-31\nChine\n\n\n\n\n\n\nLien entre 2 tables via une clé étrangère\n\n\n\n\n\nclassDiagram\n  class Joueuse {\n    id_joueuse: INT (PK)\n    nom: VARCHAR\n    prenom: VARCHAR\n    date_naissance: DATE\n    code_pays: VARCHAR (FK)\n  }\n  \n  class Pays {\n    code_pays: VARCHAR (PK)\n    nom: VARCHAR\n  }\n\n  Joueuse \"*\" -- \"1\" Pays : Appartient\n\n\n\n\n\n\nJoueuse\n\n\n\nid_joueuse\nnom\nprenom\ndate_naissance\ncode_pays\n\n\n\n\n1\nSebag\nMarie\n1986-10-15\nFR\n\n\n2\nPolgar\nJudit\n1976-07-23\nHU\n\n\n3\nHou\nYifan\n1994-02-27\nCN\n\n\n4\nKosteniuk\nAlexandra\n1984-04-23\nCH\n\n\n5\nJu\nWenjun\n1991-01-31\nCN\n\n\n\nPays\n\n\n\ncode_pays\nnom\n\n\n\n\nCH\nSuisse\n\n\nCN\nChine\n\n\nFR\nFrance\n\n\nHU\nHongrie\n\n\n\n\n\n\nLien entre 2 tables via une table d’association\n\n\n\n\n\nclassDiagram\n\n  class Joueuse {\n    id_joueuse: INT (PK)\n    nom: VARCHAR\n    prenom: VARCHAR\n    date_naissance: DATE\n    code_pays: VARCHAR (FK)\n  }\n  \n  class Tournoi {\n    id_tournoi: INT (PK)\n    nom: VARCHAR\n    ville: VARCHAR\n  }\n\n  \n  class Participation {\n    id_joueuse: INT (PK)\n    id_tournoi: INT (FK)\n  }\n\n  Joueuse \"*\" .. \"1\" Participation\n  Participation \"1\" .. \"*\" Tournoi"
  },
  {
    "objectID": "docs/sql/sql.html#sql",
    "href": "docs/sql/sql.html#sql",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "3 SQL",
    "text": "3 SQL\nSQL (Structured Query Language) est un langage de programmation utilisé pour gérer et manipuler des bases de données relationnelles.\nIl permet d’effectuer les opérations du CRUD (Create, Read, Upadate, Delete)\n\nSELECT : récupérer des données depuis une table.\nINSERT : insérer de nouvelles données dans une table.\nUPDATE : mettre à jour des données existantes dans une table.\nDELETE : supprimer des données d’une table."
  },
  {
    "objectID": "docs/sql/sql.html#actions-sur-les-colonnes",
    "href": "docs/sql/sql.html#actions-sur-les-colonnes",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "4 Actions sur les colonnes",
    "text": "4 Actions sur les colonnes\n\n4.1 Créer une Table\n💡 le ran. correspond au schéma de la remise à niveau dans lequel nous rangerons toutes les tables\n-- Création de la table personne (ceci est un commentaire)\nCREATE TABLE ran.personnes (\n    id               INT         PRIMARY KEY,\n    nom              VARCHAR(30) NOT NULL,\n    prenom           VARCHAR(40),\n    date_naissance   DATE,\n    adresse          TEXT\n);\n\n\n\nid\nnom\nprenom\ndate_naissance\nadresse\n\n\n\n\n\n\nLa table est créée mais vide\n\n\n\n\n4.2 Insérer des données\nINSERT INTO ran.personnes (id, nom, prenom, dnais, adresse)\nVALUES\n    (1, 'Dupont', 'Jean', '1990-05-15', 'Paris'),\n    (2, 'Martin', 'Emma', '1985-09-22', 'Lyon'),\n    (3, 'Leroy', 'Paul', '1995-03-10', 'Lille');\n\n\n\nid\nnom\nprenom\ndate_naissance\nadresse\n\n\n\n\n1\nGatore\nAli\n1990-05-15\nParis\n\n\n2\nDure\nLaure\n1985-09-22\nLyon\n\n\n3\nErateur\nMaud\n1995-03-10\nLille\n\n\n\n\n\n\n4.3 Renommer une colonne\nALTER TABLE ran.personnes\nRENAME COLUMN date_naissance TO dnais;\n\n\n\nid\nnom\nprenom\ndnais\nadresse\n\n\n\n\n1\nGatore\nAli\n1990-05-15\nParis\n\n\n2\nDure\nLaure\n1985-09-22\nLyon\n\n\n3\nErateur\nMaud\n1995-03-10\nLille\n\n\n\n\n\n\n4.4 Ajouter un attribut\nALTER TABLE ran.personnes\nADD joue_aux_echecs BOOLEAN;\n\n\n\nid\nnom\nprenom\ndnais\nadresse\nechecs\n\n\n\n\n1\nGatore\nAli\n1990-05-15\nParis\ntrue\n\n\n2\nDure\nLaure\n1985-09-22\nLyon\nfalse\n\n\n3\nErateur\nMaud\n1995-03-10\nLille\ntrue\n\n\n\n\n\n\n4.5 Supprimer une colonne\nALTER TABLE ran.personnes\nDROP COLUMN adresse;\n\n\n\nid\nnom\nprenom\ndnais\nechecs\n\n\n\n\n1\nGatore\nAli\n1990-05-15\ntrue\n\n\n2\nDure\nLaure\n1985-09-22\nfalse\n\n\n3\nErateur\nMaud\n1995-03-10\ntrue\n\n\n\n\n\n\n4.6 Supprimer une table\nDROP TABLE ran.personnes;\n&gt; ERREUR: la relation « ran.personnes » n'existe pas"
  },
  {
    "objectID": "docs/sql/sql.html#actions-sur-les-lignes",
    "href": "docs/sql/sql.html#actions-sur-les-lignes",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "5 Actions sur les lignes",
    "text": "5 Actions sur les lignes\n\n\n\nid\nprenom\nnom\ndate_naissance\nadresse\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.1 Insérer des lignes\nINSERT INTO ran.personnes \n(id, nom,     prenom,     date_naissance,  adresse)\nVALUES\n(1, 'Ali',    'Gatore',   '1990-05-15',    'Paris'),\n(2, 'Laure',  'Dure',     '1985-09-22',    'Lyon' ),\n(3, 'Maud',   'Erateur',  '1995-03-10',    'Lille');\n\n\n\nid\nprenom\nnom\ndate_naissance\nadresse\n\n\n\n\n1\nAli\nGatore\n1990-05-15\nParis\n\n\n2\nLaure\nDure\n1985-09-22\nLyon\n\n\n3\nMaud\nErateur\n1995-03-10\nLille\n\n\n\n\n\n\n5.2 Sélectionner des lignes\nSELECT *\n  FROM ran.personnes\n WHERE adresse LIKE 'L%'\n   AND prenom = 'Laure';\n\n\n\nid\nprenom\nnom\ndate_naissance\nadresse\n\n\n\n\n2\nLaure\nDure\n1985-09-22\nLyon\n\n\n\n\n\n\n5.3 Jointures\n\nTable commande\n\n\n\n\nid\nproduit\nquantite\nid_personne\nprix_unitaire\n\n\n\n\n1\nlivre\n1\n2\n3\n\n\n\nSELECT p.prenom,\n       c.produit,\n       c.quantite\n  FROM ran.personnes p\n  JOIN ran.commandes c ON p.id = c.id_personne\n WHERE prenom = 'Laure';\n\n💡 il est possible d’utiliser le mot clé USING à la place de ON si les 2 colonnes permettant la jointure ont le même nom.\nexemple : si dans la table personnes nous avons id_personne au lieu de id, la requête ci-dessous peut-être modifiée en :\n\nSELECT p.prenom,\n       c.produit,\n       c.quantite\n  FROM ran.personnes p\n  JOIN ran.commandes c USING(id_personne) -- &lt;--\n WHERE prenom = 'Laure';\n\n\n\n5.4 Jointures externes\n\nQue se passe t’il si nous exécutons la requête ci-dessous et qu’Ali n’a passé aucune commande ?\n\nSELECT p.prenom,\n       c.produit,\n       c.quantite\n  FROM ran.personnes p\n  JOIN ran.commandes c ON p.id = c.id_client\nPour afficher toutes les personnes, même celles qui n’ont pas réalisé de commande, nous allons utiliser les jointures externees : LEFT JOIN ou RIGHT JOIN\nSELECT p.prenom,\n       c.produit,\n       c.quantite\n  FROM ran.personnes p\n  LEFT JOIN ran.commandes c ON p.id = c.id_client\nIci le LEFT JOIN indique que nous affichons : - les données provenant de la table personnes - complétées par les données de la table commandes pour les lignes où le lien est établi\n\n\n\n5.5 Mettre à jour des lignes\nUPDATE ran.personnes\n   SET adresse = 'Rennes'\n WHERE id = 2;\n\n\n\nid\nprenom\nnom\ndate_naissance\nadresse\n\n\n\n\n1\nAli\nGatore\n1990-05-15\nParis\n\n\n2\nLaure\nDure\n1985-09-22\nRennes\n\n\n3\nMaud\nErateur\n1995-03-10\nLille\n\n\n\n\n\n\n5.6 Supprimer des lignes\nDELETE FROM ran.personnes\n WHERE prenom = 'Ali';\n\n\n\nid\nprenom\nnom\ndate_naissance\nadresse\n\n\n\n\n2\nLaure\nDure\n1985-09-22\nRennes\n\n\n3\nMaud\nErateur\n1995-03-10\nLille"
  },
  {
    "objectID": "docs/sql/sql.html#formes-normales",
    "href": "docs/sql/sql.html#formes-normales",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "6 Formes normales",
    "text": "6 Formes normales\n\n1ere forme normale (1NF) : Une relation est 1NF si elle possède au moins une clé et si tous ses attributs sont atomiques.\n\nUn attribut est atomique si il ne contient qu’une seule valeur pour un tuple donné, et donc s’il ne regroupe pas un ensemble de plusieurs valeurs.\nPar exemple, une adresse du type 20 rue du Général de Gaulle 35170 BRUZ n’est pas atomique\n\n2NF : 1NF + tout attribut non clé dépend de la clé\n3NF : 2NF + un attribut non clé ne peut pas dépendre d’un autre attribut non clé"
  },
  {
    "objectID": "docs/sql/sql.html#premières-manipulations",
    "href": "docs/sql/sql.html#premières-manipulations",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "7 Premières manipulations",
    "text": "7 Premières manipulations\n\n7.1 Les schémas\nPar défaut toutes les tables que nous allons créer iraient dans le schéma public.\n💡 pour une meilleure organisation, nous allons classer nos tables dans différents schémas :\n\nran : schéma utilisé pour la remise à niveau\nci : schéma utilisé en compléments d’informatique\nprojet : schéma du projet info 2A\n\nCREATE schema ran;\nCREATE schema ci;\nCREATE schema projet;\n\n\n\n7.2 Mots clés utiles\n\nLIKE\n\nUtilisé dans une clause WHERE pour effectuer des recherches de motif dans une colonne\n\n-- toutes les personnes ayant un prénom contenant \"au\"\nSELECT \n  FROM ran.personnes\n WHERE prenom LIKE '%au%';\n\n\nGROUP BY\n\nUtilisé pour regrouper les résultats en fonction d’une ou plusieurs colonnes et permettre l’utilisation de fonctions d’agrégation telles que COUNT, SUM, AVG\n\nSELECT adresse,\n       COUNT(1)\n  FROM ran.personnes\n GROUP BY adresse;\n\n\nHAVING\n\nUtilisé après la clause GROUP BY pour filtrer les résultats en fonction d’une condition après le GROUP BY.\n⚠️ ne pas confondre avec WHERE qui s’appliquerait avant le GROUP BY\n\nSELECT adresse,\n       COUNT(1)\n  FROM ran.personnes\n GROUP BY adresse\nHAVING COUNT(1) &gt;= 5;\n\n\nORDER BY\nSELECT *\n  FROM ran.personnes\n ORDER BY adresse DESC\n\n\nAS\n\nPermet de renommer une colonne dans l’affichage\n\nSELECT adresse AS Ville\n  FROM ran.personnes\n\n\n\nQuelques possibilités d’utilisation sans table\nSELECT CURRENT_DATE;\nSELECT 1+2;\nSELECT 1 &gt; 2;\nSELECT 'Salut';"
  },
  {
    "objectID": "docs/sql/sql.html#exercice",
    "href": "docs/sql/sql.html#exercice",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "8 Exercice",
    "text": "8 Exercice\n\nAvant de commencer\n\nconsultez le fichier d’utilisation de DBeaver\nCopiez le contenu du fichier echecs.sql,\nCollez dans DBeaver\nExécuter le script.\n\n\n\nDescription des données\n\nNous avons des joueurs, des tournois\nCertains joueurs sont aussi arbitres et ont un grade d’arbitre\nLes tournois ont une cadence. Ils sont arbitrés par un arbitre\n\n\n\n\n\n\nclassDiagram\n  class arbitre_grade {\n    id_arbitre_grade: INT(PK)\n    nom: VARCHAR\n  }\n\n  class joueur {\n    id_joueur: INT(PK)\n    pseudo: VARCHAR\n    nom: VARCHAR\n    prenom: VARCHAR\n    elo: INT\n    mail: VARCHAR\n    id_arbitre_grade: INT(FK -&gt; arbitre_grade)\n  }\n\n  class cadence {\n    id_cadence: INT(PK)\n    nom: VARCHAR\n  }\n\n  class tournoi {\n    id_tournoi: INT(PK)\n    id_arbitre: INT(FK -&gt; joueur)\n    nom: VARCHAR\n    debut: DATE\n    fin: DATE\n    nb_rondes: INT\n    id_cadence: INT(FK -&gt; cadence)\n  }\n\n  class participant {\n    id_tournoi: INT(FK -&gt; tournoi)\n    id_joueur: INT(FK -&gt; joueur)\n  }\n\n  arbitre_grade -- joueur\n  cadence -- tournoi\n  tournoi -- participant\n  joueur -- participant\n\n\n\n\n\n\n\n\n\nQuestions\n\nListez tous les joueurs\n\nFaîtes de même sur les autres tables pour observer leur contenu\n\nListez tous les joueurs ordonnés par elo descroissant\nListez tous les joueurs ayant un elo inférieur ou égal à 2000\nListez tous les joueurs ayant un elo inférieur ou égal à 2000 et dont le prénom contient un “e” (majuscule ou minuscule) 💡 tip : voir méthode UPPER\nCréez la joueuse : Martine Dupont, elo : 1999, Arbitre Elite\nSupprimez le joueur de pseudo marc78\nEssayez de supprimer le joueur ayant pour id : 20\n\nPourquoi cela ne fonctionne pas ? Que faudrait-t-il faire pour supprimer ce joueur ?\n\nListez les joueurs qui sont arbitres 💡 voir IS NOT NULL\nAjoutez à la table joueur la colonne de type booléen est_arbitre\nRemplissez cette nouvelle colonne pour tous les joueurs\nListez les joueurs (nom, prénom) qui sont arbitres, ainsi que leur grade d’arbitre\nListez tous les joueurs (nom, prénom) ainsi que leur grade d’arbitre s’ils le sont\nComptez le nombre de joueurs qui sont arbitre\nComptez le nombre d’arbitres par grade\nComptez le nombre d’arbitres par grade et n’afficher que si la moyenne elo des arbitres du grade est supérieure à 2000\nAffichez la liste des tournois (nom du tournoi, cadence, arbitre)\nAjouter le nombre de joueurs et le elo max des joueurs\n\n\nLa correction est disponible ici."
  }
]