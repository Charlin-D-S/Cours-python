---
title: "Introduction à Python"
description: "[Slides](python-cours-slides.html)"
author: "Ludovic Deneuville"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [Introduction à Python](python-cours.html)"
    slide-number: c/t                    # collapsed/total
    slide-level: 3
    controls: true
    output-file: python-cours-slides.html
from: markdown+emoji
lightbox: true
---


## Historique

- Créé par [Guido van Rossum](https://fr.wikipedia.org/wiki/Python_(langage)#/media/Fichier:Guido_van_Rossum_OSCON_2006.jpg){target="_blank"} (Pays-Bas)
- 1ère version en 1991
- Géré par la *Python Software Foundation* depuis 2001
- [Python](https://www.python.org/){target="_blank"} 3.12


::: {.notes}
- Créé fin 1989 pendant les vacances de Noël
- Python Software Foundation (asso à but non lucratif) : promouvoir et protéger le langage afin d'étendre la communauté
:::

## Pourquoi Apprendre Python ?

- Langage polyvalent et populaire
- Facilité d'apprentissage et de lecture
- Large communauté et nombreuses ressources
- Nombreux packages

::: {.notes}
- Important dans le monde de la data science et de l'ingénierie.
:::


## Les Fondamentaux de Python

- Langage interprété et interactif
- Typage Dynamique
- Syntaxe claire et concise
- Supporte plusieurs paradigmes (procédural, orienté objet, fonctionnel)

::: {.notes}
- Expliquer la différence entre un langage interprété et compilé.
- interactif : environnement où vous pouvez entrer des commandes Python une par une, voir immédiatement les résultats (Notebook)
- Typage Dynamique (vérification des types au moment de l'exécution) 
  ```{.python}
  a = 5
  a = "toto"
  ```
:::


## Python à l'ENSAI

- Distribution CPython
- Version 3.10 (`python --version`)
- Vous allez coder dans :
  - des [notebooks Jupyter](https://jupyter.org/){target="_blank"}
  - [Visual Studio Code](https://code.visualstudio.com/){target="_blank"}
- Packages pré-installés

::: {.notes}
Distribution : version pré-packagée de l'interpréteur Python accompagnée de nombreux modules, bibliothèques et outils

- Anaconda (datascience et machine learning)
- Miniconda (plus léger)

Autre IDE : PyCharm, Atom

Gestionnnaire de packages **pip**, à lancer dans un terminal
:::

## Packages

Dans un terminal (par exemple : **Git Bash**)

```{.bash}
pip list                            # Packages installés
pip install <package>               # Installer un package
pip install <package>==<version>    # Version spécifique
pip uninstall <package>

# Distribution utilisée
python -c 'import platform; print(platform.python_implementation())'
```

::: {.notes}
En projet :

- liste des packages dans un fichier texte à la racine
- `pip install - r requirements.txt`

**Démo** : lancer python dans le terminal
:::

### Packages populaires

Datascience :

- NumPy
- Pandas, Polars
- Matplotlib, Seaborn

::: {.notes}
- NumPy
  - Calcul numérique
  - ndarray, perf, stats, manipulation des tableaux
- Pandas
  - dataframe, analyse de données
- Matplotlib : graphiques
:::


## Écrire votre Premier Code en Python

- Variables et types de données (int, float, str, bool, list, dict)
- Opérations de base
- Sensible à l'indentation
- Structures de contrôle (if, for, while)


::: {.notes}
- = : affectation
- == : test d'égalité / != différence

indentation : utiliser un formateur dans VSCode
:::

### Structures de contrôle

::: {.panel-tabset .nav-pills}

#### If

```{python}
#| eval: true
#| echo: true
note = 18

if note > 16:
    print("Validé avec mention")
elif note > 10:
    print("Validé")
else:
    print("Non validé")
```

#### For

```{python}
#| eval: true
#| echo: true
for i in range(1, 5):
    print(i)
```

#### While

```{python}
#| eval: true
#| echo: true
cpt = 10
while cpt > 0:
    print(cpt, end = " ")
    cpt -= 1    
print("boom")
```

#### Enumerate

```{python}
#| eval: true
#| echo: true
liste = ["Alban", "Bertille", "Corine"]

for i, v in enumerate(liste):
    print(f"index {i} : valeur {v}")
```

:::



## Collections - les 2 principales

- **Liste** : collection ordonnée de valeurs modifiables
  ```{.python} 
  list = ["pomme", "poire", 2, True]
  ```
- **Dictionnaire** : collection de paires clé-valeur non ordonnées
  ```{.python} 
  recette = {"fraise": 5, "Moutarde": "5g"}
  ```

### Autres Collections utiles

- **Set** : collection non ordonnée de valeurs uniques
  ```{.python} 
  premiers = {2, 3, 5, 7, 11, 13}
  ```
- **Tuple** : collection ordonnée de valeurs immuables
  ```{.python} 
  coord = (-1, 5, 4)
  ```

::: {.callout-note}
De nombreux autres types de collections existent (Arbre, Liste chainée...).
:::

### Collections principales - résumé

| Type de Donnée | Ordonné | Mutable | Doublon |
|----------------|:-------:|:-------:|:-------:|
| list           | ✔       | ✔       |        |
| dict           |         | ✔       |         |
| tuple          | ✔       |         | ✔      |
| set            |         | ✔       |         |


## Aide au développement

Pour apprendre le langage, évitez de foncer vers les LLM.

Préférez :

- [Aide en ligne](https://docs.python.org/fr/3.10/tutorial/){target="_blank"}
- Votre moteur de recherche favori
- [Stack Overflow](https://stackoverflow.com/){target="_blank"}

### Ressources utiles 

- [Real Python](https://realpython.com/){target="_blank"}
- [Python pour la datascience](https://pythonds.linogaliana.fr/){target="_blank"}
- [Automate the Boring Stuff with Python](https://automatetheboringstuff.com/){target="_blank"}

::: {.notes}
LLM pas adapté pour retenir mais pratique pour :

- déboguer
- documenter
::: 

## Au travail

5 notebooks sont à votre disposition pour apprendre les bases du langage :

[Comment utiliser les notebooks](./python-notebooks.qmd)