---
title: "Bases de Données Relationnelles et SQL"
description: "[Slides](sql-cours-slides.html)"
author: "Ludovic Deneuville"
format: 
  html:
    toc: true
    toc-location: left
    toc-expand: 3
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [Introduction à SQL](sql-cours.html)"
    slide-number: c/t                    # collapsed/total
    slide-level: 3
    controls: true
    output-file: sql-cours-slides.html
mermaid:
  theme: forest
code-line-numbers: false
from: markdown+emoji
---

## Objectifs {.unnumbered}

- [ ] Qu'est ce qu'une base de données relationnelle ?
- [ ] Comment sont construites les tables ?
- [ ] Savoir écrire des requêtes SQL
- [ ] Utiliser le logiciel [DBeaver](https://dbeaver.io/){target="_blank"}


## Qu'est-ce qu'une base de données ?

- Ensemble de données stockées dans des `Tables`
- Tables liées entre elles
- Tables Structurées
- Éviter la redondance

::: {.notes}
- stockées numériquement
- peut être utilisée par des applications
- interrogeables, modifiables par les utilisateurs
:::


### SGBD

Un Système de Gestion de Base de Données (SGBD) est un logiciel qui permet de :

- stocker
- organiser
- gérer des données de manière structurée

Exemples de SGBD :

- relationnelles : [PostgreSQL](https://www.postgresql.org/){target="_blank"}, MySQL, Oracle Database
- NoSQL : MongoDB, Cassandra 

::: {.notes}

:::


### Base de données relationnelles

- Organise les données sous forme de tables interconnectées
- Les tables seront liées entre elle 


### Kesako

- **PostgreSQL** : SGBD
- **DBeaver** : outil client qui permet de se connecter à un SGBD
- **SQL** : langage de programmation conçu pour gérer et manipuler des bases de données relationnelles.

:::{.notes}
On parle de SQL ensuite
:::


## Table

Une `Table` est composée de lignes et de colonnes :

- une `ligne` représente un enregistrement spécifique
- une `colonne` représente un attribut particulier de ces enregistrements
- `Clé primaire` (PK) : colonne ou un ensemble de colonnes qui identifie de manière unique chaque enregistrement dans une table


### Table - exemple {.smaller}

::: {.panel-tabset .nav-pills}

#### Diagramme UML 

:::{style="background-color: #199edd;"}

```{mermaid}
classDiagram
  class Joueuse {
    id_joueuse: INT(PK)
    nom: VARCHAR
    prenom: VARCHAR
    date_naissance: DATE
    pays: VARCHAR
  }
```

:::


#### Données

| id_joueuse (PK) | nom       | prenom    | date_naissance | pays    |
| --------------- | --------- | --------- | -------------- | ------- |
| 1               | Sebag     | Marie     | 1986-10-15     | France  |
| 2               | Polgar    | Judit     | 1976-07-23     | Hongrie |
| 3               | Hou       | Yifan     | 1994-02-27     | Chine   |
| 4               | Kosteniuk | Alexandra | 1984-04-23     | Suisse  |
| 5               | Ju        | Wenjun    | 1991-01-31     | Chine   |

: Joueuse

:::


## Associations entre tables {.smaller}

### Clé étrangère

Une clé étrangère (FK) :

- permet de faire le lien entre 2 tables
- c'est une colonne d'une table A
- elle correspond à la clé primaire d'une table B


### Types d'associations

- `1..1` : Une *Personne* a un *Passeport* et un *Passeport* appartient à une seule *Personne*
  - la clé étrangère pourra être placée dans l'une des deux tables
- `1..` : Une *Joueuse* joue pour une seule équipe *Equipe*. Une *Equipe* est composée de plusieurs *Joueuses*
  - la clé étrangère devra être placée dans la table *Joueuse*
- `..*` : Un *Etudiant* suit plusieurs *Cours* et un *Cours* et suivi par plusieurs *Etudiants*
  - il faut créer une table d'association entre *Etudiant* et *Cours*


### Lien entre 2 tables via une clé étrangère {.smaller}

::: {.panel-tabset .nav-pills}

#### Diagramme

:::{style="background-color: #199edd;"}

```{mermaid}
classDiagram
  direction LR
  
  class Joueuse {
    id_joueuse: INT (PK)
    nom: VARCHAR
    prenom: VARCHAR
    date_naissance: DATE
    code_pays: VARCHAR (FK)
  }
  
  class Pays {
    code_pays: VARCHAR (PK)
    nom: VARCHAR
  }

  Joueuse "*" -- "1" Pays : Appartient
```

:::

#### Table joueuse

| id_joueuse | nom       | prenom    | date_naissance | code_pays |
| ---------- | --------- | --------- | -------------- | --------- |
| 1          | Sebag     | Marie     | 1986-10-15     | FR        |
| 2          | Polgar    | Judit     | 1976-07-23     | HU        |
| 3          | Hou       | Yifan     | 1994-02-27     | CN        |
| 4          | Kosteniuk | Alexandra | 1984-04-23     | CH        |
| 5          | Ju        | Wenjun    | 1991-01-31     | CN        |




#### Table pays

| code_pays | nom     |
| --------- | ------- |
| CH        | Suisse  |
| CN        | Chine   |
| FR        | France  |
| HU        | Hongrie |



:::


### Lien entre 2 tables via une table d'association {.smaller}

::: {.panel-tabset .nav-pills}

#### Diagramme

:::{style="background-color: #199edd;"}

```{mermaid}
classDiagram
  direction LR

  class Joueuse {
    id_joueuse: INT (PK)
    nom: VARCHAR
    prenom: VARCHAR
    date_naissance: DATE
    code_pays: VARCHAR (FK)
  }
  
  class Tournoi {
    id_tournoi: INT (PK)
    nom: VARCHAR
    ville: VARCHAR
  }

  
  class Participation {
    id_joueuse: INT (FK)
    id_tournoi: INT (FK)
  }

  Joueuse "*" .. "1" Participation
  Participation "1" .. "*" Tournoi
```

:::

#### Table joueuse

| id_joueuse | nom       | prenom    | date_naissance | code_pays |
| ---------- | --------- | --------- | -------------- | --------- |
| 1          | Sebag     | Marie     | 1986-10-15     | FR        |
| 2          | Polgar    | Judit     | 1976-07-23     | HU        |
| 3          | Hou       | Yifan     | 1994-02-27     | CN        |
| 4          | Kosteniuk | Alexandra | 1984-04-23     | CH        |
| 5          | Ju        | Wenjun    | 1991-01-31     | CN        |



#### Table participation

| id_joueuse | id_tournoi |
| ---------- | ---------- |
| 1          | 1          |
| 1          | 2          |
| 3          | 2          |
| 4          | 1          |
| 4          | 2          |



#### table tournoi

| id_tournoi | nom          | ville        |
| ---------- | ------------ | ------------ |
| 1          | Norway Chess | Oslo         |
| 2          | Tata Steel   | Wijk aan Zee |



:::


## SQL

- SQL : Structured Query Language
- Inventé en 1970 par Edgar F. Codd
- Langage de programmation 
- Utilisé pour gérer et manipuler des bases de données relationnelles

:::{.notes}
- très très très utilisé
- tous les langages qui traitent de la data peuvent encapsuler du SQL
:::

### Opérations CRUD

SQL permet d'effectuer les opérations du CRUD :

- `SELECT` : récupérer des données depuis une table
- `INSERT` : insérer de nouvelles données dans une table
- `UPDATE` : mettre à jour des données existantes dans une table
- `DELETE` : supprimer des données d'une table


##  Actions sur une table

### Créer une Table

::: {.panel-tabset .nav-pills}

#### Requête

```{.sql}
-- Création de la table personne (cette ligne est un commentaire)

CREATE TABLE personne (
    id_personne      INT         PRIMARY KEY,
    nom              VARCHAR(30) NOT NULL,
    prenom           VARCHAR(40),
    date_naissance   DATE,
    adresse          TEXT
);
```

#### Résultat

La table est créée mais vide.

| id_personne | nom | prenom | date_naissance | adresse |
| ----------- | --- | ------ | -------------- | ------- |
|             |     |        |                |         |


::: {.callout-tip}
Le `ran.` correspond au schéma de la remise à niveau dans lequel nous rangerons toutes les tables.
:::

:::


### Insérer des données

::: {.panel-tabset .nav-pills}

#### Requête

```{.sql}
INSERT INTO personne (id_personne, nom, prenom, date_naissance, adresse)
VALUES
    (1, 'Gatore', 'Ali', '1990-05-15', 'Amiens'),
    (2, 'Dure', 'Laure', '1985-09-22', 'Auxerre'),
    (3, 'Erateur', 'Maud', '1995-03-10', 'Lille');
```

#### Résultat

| id_personne | nom     | prenom | date_naissance | adresse |
| ----------- | ------- | ------ | -------------- | ------- |
| 1           | Gatore  | Ali    | 1990-05-15     | Amiens  |
| 2           | Dure    | Laure  | 1985-09-22     | Auxerre |
| 3           | Erateur | Maud   | 1995-03-10     | Lille   |

:::

### Supprimer une table

```{.sql}
DROP TABLE personne;
```

Si ensuite, vous essayez :

```{.sql}
SELECT *
  FROM personne;
```

> ERREUR: la relation « personne » n'existe pas


##  Actions sur les lignes


###  Sélectionner tout

Pour afficher tout le contenu d'une table.

```{.sql}
SELECT *
  FROM personne;
```

:::{.notes}
- Une requête se termine par un ;
- Possible de limiter le nombre de lignes affichées
  - LIMIT 5
:::

###  Filter les lignes

::: {.panel-tabset .nav-pills}

#### Requête

```{.sql}
SELECT *
  FROM personne
 WHERE adresse LIKE 'A%'
   AND prenom = 'Laure';
```

::: {.callout-tip}
Pour une meilleure lisibilité, alignez votre code !
:::

#### Résultat

| id_personne | prenom | nom  | date_naissance | adresse |
| ----------- | ------ | ---- | -------------- | ------- |
| 2           | Laure  | Dure | 1985-09-22     | Auxerre |


#### LIKE

La clause `LIKE` est utilisée pour rechercher un texte spécifique dans une colonne de texte

- `%` représente zéro, un ou plusieurs caractères
- `_` représente un seul caractère

:::

###  Mettre à jour des lignes

::: {.panel-tabset .nav-pills}

#### Requête

```{.sql}
UPDATE personne
   SET adresse = 'Amiens'
 WHERE id_personne = 2;
```

#### Résultat

| id_personne | prenom | nom     | date_naissance | adresse |
| ----------- | ------ | ------- | -------------- | ------- |
| 1           | Ali    | Gatore  | 1990-05-15     | Amiens  |
| 2           | Laure  | Dure    | 1985-09-22     | Amiens  |
| 3           | Maud   | Erateur | 1995-03-10     | Lille   |

::: {.callout-note title="Résultat du SELECT" collapse="true"}
```{.sql}
SELECT * 
  FROM personne;
```
:::

:::

:::{.notes}
- simples quotes en SQL
- pas de double
:::

###  Supprimer des lignes

::: {.panel-tabset .nav-pills}

#### Requête

```{.sql}
DELETE FROM personne
 WHERE prenom = 'Ali';
```

#### Résultat

| id_personne | prenom | nom     | date_naissance | adresse |
| ----------- | ------ | ------- | -------------- | ------- |
| 2           | Laure  | Dure    | 1985-09-22     | Amiens  |
| 3           | Maud   | Erateur | 1995-03-10     | Lille   |

::: {.callout-note title="Pour faire revivre Ali" collapse="true"}
```{.sql}
INSERT INTO personne (id_personne, nom, prenom, date_naissance, adresse)
VALUES (1, 'Gatore', 'Ali', '1990-05-15', 'Amiens');
```
:::

:::


##  Actions sur les colonnes

### Sélectioner des colonnes

::: {.panel-tabset .nav-pills}

#### Requête

```{.sql}
SELECT nom,
       prenom
  FROM personne;
```

#### Résultat

| nom     | prenom |
| ------- | ------ |
| Gatore  | Ali    |
| Dure    | Laure  |
| Erateur | Maud   |

:::

###  Renommer une colonne

::: {.panel-tabset .nav-pills}

#### Requête

```{.sql}
ALTER TABLE personne
RENAME COLUMN date_naissance TO dnais;
```

#### Résultat

| id_personne | nom     | prenom | dnais      | adresse |
| ----------- | ------- | ------ | ---------- | ------- |
| 1           | Gatore  | Ali    | 1990-05-15 | Amiens  |
| 2           | Dure    | Laure  | 1985-09-22 | Amiens  |
| 3           | Erateur | Maud   | 1995-03-10 | Lille   |

:::


###  Ajouter un attribut

::: {.panel-tabset .nav-pills}

#### Requête

```{.sql}
ALTER TABLE personne
ADD joue_aux_echecs BOOLEAN;
```

Vous pouvez ajouter une valeur par défaut.

```{.sql}
ALTER TABLE personne
ADD joue_aux_echecs BOOLEAN DEFAULT true;
```

#### Résultat

| id_personne | nom     | prenom | dnais      | adresse | joue_aux_echecs |
| ----------- | ------- | ------ | ---------- | ------- | --------------- |
| 1           | Gatore  | Ali    | 1990-05-15 | Amiens  | true            |
| 2           | Dure    | Laure  | 1985-09-22 | Amiens  | true            |
| 3           | Erateur | Maud   | 1995-03-10 | Lille   | true            |

:::

###  Supprimer une colonne

::: {.panel-tabset .nav-pills}

#### Requête

```{.sql}
ALTER TABLE personne
DROP COLUMN joue_aux_echecs;
```

#### Résultat

| id_personne | nom     | prenom | dnais      | adresse |
| ----------- | ------- | ------ | ---------- | ------- |
| 1           | Gatore  | Ali    | 1990-05-15 | Amiens  |
| 2           | Dure    | Laure  | 1985-09-22 | Amiens  |
| 3           | Erateur | Maud   | 1995-03-10 | Lille   |

:::

### Renommer à l'affichage

Le mot clé `AS` permet de renommer une colonne à l'affichage. Il ne change pas le nom de la colonne.

::: {.panel-tabset .nav-pills}

#### Requête

```{.sql}
SELECT prenom,
       adresse AS Ville
  FROM personne;
```

#### Résultat

| prenom | Ville  |
| ------ | ------ |
| Maud   | Lille  |
| Ali    | Amiens |
| Laure  | Amiens |

:::


## Jointures

::: {.callout-important}
Jusqu'à maintenant, nous n'avions qu'une seule table
:::

### Jointure totale {.smaller}

::: {.panel-tabset .nav-pills}

#### Requête

```{.sql}
SELECT p.prenom,
       c.produit,
       c.quantite
  FROM personne p
  JOIN commande c ON p.id_personne = c.id_personne
 WHERE prenom = 'Laure';
```

#### Requête bis

```{.sql}
SELECT p.prenom,
       c.produit,
       c.quantite
  FROM personne p
  JOIN commande c USING(id_personne);
```

::: {.callout-tip title="USING"}
Si et seulement si les 2 colonnes qui permettent de faire la jointure ont le même nom.

:arrow_right_hook: Alors vous pouvez utiliser cette syntaxe avec USING.
:::


#### Personne

| id_personne | nom     | prenom | dnais      | adresse |
| ----------- | ------- | ------ | ---------- | ------- |
| 1           | Gatore  | Ali    | 1990-05-15 | Amiens  |
| 2           | Dure    | Laure  | 1985-09-22 | Amiens  |
| 3           | Erateur | Maud   | 1995-03-10 | Lille   |


#### Commande

::: {.callout-note title="Créer et insérer les données" collapse="true"}
```{.sql}
CREATE TABLE commande (
    id_commande INT PRIMARY KEY,
    produit VARCHAR(50),
    quantite INT,
    prix_unitaire DECIMAL(10, 2),
    id_personne INT
);

INSERT INTO commande (id_commande, produit, quantite, prix_unitaire, id_personne) VALUES
(1, 'livre', 1, 10, 2),
(2, 'pain', 3, 2, 3),
(3, 'pomme', 10, 0.5, 2);
```
:::

| id_commande | produit | quantite | prix_unitaire | id_personne |
| ----------- | ------- | -------- | ------------- | ----------- |
| 1           | livre   | 1        | 10            | 2           |
| 2           | pain    | 3        | 2             | 3           |
| 3           | pomme   | 10       | 0.5           | 2           |


#### Résultat

| prenom | produit | quantite |
| ------ | ------- | -------- |
| Laure  | livre   | 1        |
| Laure  | pomme   | 10       |
| Maud   | pain    | 3        |

:::

### Types de jointures

Dans la jointure précédente :

- Laure apparait 2 fois car elle a 2 commandes
- Maud apparait une fois
- Ali n'apparait pas

Comment faire pour inclure Ali dans le tableau même sans commande ?

:::{.notes}
- jointure interne (INNER JOIN)
  - la valeur de *id_personne* doit être présente dans les 2 tables
  - sinon *id_personne* est dans une seule, alors rien n'est affiché la concernant
:::

### Jointures externes

::: {.panel-tabset .nav-pills}

#### Requête

```{.sql}
SELECT p.prenom,
       c.produit,
       c.quantite
  FROM personne p
  LEFT JOIN commande c USING(p.id_personne);
```

#### Résultat

| prenom | produit | quantite |
| ------ | ------- | -------- |
| Laure  | livre   | 1        |
| Laure  | pomme   | 10       |
| Maud   | pain    | 3        |
| Ali    |         |          |


#### Explication

La **jointure externe** effectuée avec le mot clé `LEFT JOIN` indique que nous affichons :

- toutes les données provenant de la table **personnes**
- complétées par les données de la table **commandes** 
  - pour les lignes où le lien est établi

:::

## Agrégation

### GROUP BY

- Utilisé pour regrouper les résultats en fonction d'une ou plusieurs colonnes 
- et permettre l'utilisation de fonctions d'agrégation telles que COUNT, SUM, AVG

::: {.panel-tabset .nav-pills}

#### Requête

```{.sql}
SELECT adresse,
       COUNT(1)
  FROM personne
 GROUP BY adresse;
```

#### Résultat

| adresse | count |
| ------- | ----- |
| Amiens  | 2     |
| Lille   | 1     |

:::

### HAVING

::: {.panel-tabset .nav-pills}

Utilisé après la clause GROUP BY pour filtrer les résultats.

#### Requête

```{.sql}
SELECT adresse,
       COUNT(1)
  FROM personne
 GROUP BY adresse
HAVING COUNT(1) >= 1;
```

#### résultat

| adresse | count |
| ------- | ----- |
| Amiens  | 2     |

#### Attention

::: {.callout-warning}
- ne pas confondre avec `WHERE`
- `HAVING` sert à filter après un GROUP BY
:::

:::


## Ordonner les lignes

Pour ordonner les résultats (ajouter éventuellement *DESC* pour décroissant).


::: {.panel-tabset .nav-pills}

#### Requête

```{.sql}
SELECT *
  FROM personne
 ORDER BY dnais DESC
```

#### Résultat

| id_personne | nom     | prenom | dnais      | adresse |
| ----------- | ------- | ------ | ---------- | ------- |
| 3           | Erateur | Maud   | 1995-03-10 | Lille   |
| 1           | Gatore  | Ali    | 1990-05-15 | Amiens  |
| 2           | Dure    | Laure  | 1985-09-22 | Amiens  |

:::

:::{.notes}
Possible d'ordonner selon plusieurs colonnes
:::


##  Formes normales

### 1ere forme normale


::: {.panel-tabset .nav-pills}

#### Énoncé

Une relation est de première forme normale (1NF) si 

- elle possède au moins une clé 
- et si tous ses attributs sont atomiques
  - un attribut est **atomique** si il ne contient qu'une seule valeur pour un tuple donné
  - donc s'il ne regroupe pas un ensemble de plusieurs valeurs

#### Exemples

| id    | nom          |
| ----- | ------------ |
| Maud  | Maud Erateur |
| Ali   | Ali Gator    |
| Laure | Laure Dure   |

ne respecte pas la 1NF car son attribut *nom* n'est pas atomique.


### Autres formes normales

- 2NF : 1NF + tout attribut non clé dépend de la clé
- 3NF : 2NF + un attribut non clé ne peut pas dépendre d’un autre attribut non clé


## Les schémas

Par défaut toutes les tables que nous allons créer iraient dans le schéma *public*.  
:bulb: pour une meilleure organisation, nous allons classer nos tables dans différents schémas :

- `ran` : schéma utilisé pour la remise à niveau
- `projet` : schéma du projet info 2A

```{.sql}
CREATE schema ran;
CREATE schema projet;
```

## SQL sans table

```{.sql}
SELECT CURRENT_DATE;
SELECT 1 + 2;
SELECT 1 > 2;
SELECT 'Salut';
```


## Bibliographie

<https://www-lisic.univ-littoral.fr/~hebert/bdd/introduction/>
<https://sql.sh/>

- DBeaver 
- <https://www.programiz.com/sql/online-compiler/>
- <https://www.mycompiler.io/fr/new/sql>