---
title: "Bases de Données Relationnelles et SQL"
description: "Introduction aux Bases de Données Relationnelles et SQL"
author: "Ludovic Deneuville"
format: 
  html:
    toc: true
    toc-location: left
    toc-expand: 3
from: markdown+emoji
number-sections: true
number-depth: 3
---

## Objectifs {.unnumbered}

- [ ] Qu'est ce qu'une base de données relationnelle ?
- [ ] Comment sont construits les tables ?
- [ ] Savoir écrire des requêtes SQL
- [ ] Utiliser [DBeaver](DBeaver.qmd)


## Introduction

Une `Base de données` (BDD) est une collection organisée de données structurées stockées dans des `Tables`


Une `Table` est composée de lignes et de colonnes :
- une `ligne` représente un enregistrement spécifique
- une `colonne` représente un attribut particulier de ces enregistrements
- `Clé primaire` (PK) : colonne ou un ensemble de colonnes qui identifie de manière unique chaque enregistrement dans une table


Une base de données relationnelle (BDDR) organise les données sous forme de tables interconnectées.
Les tables seront liées entre elle grace à des `clés étrangères` (FK). Il y a trois principaux types d'associations :

- `1..1` : Une *Personne* a un *Passport* et un *Passport* appartient à une seule *Personne*
  - la clé étrangère pourra être placée dans l'une des deux tables
- `1..` : Une *Joueuse* joue pour une seule équipe *Equipe*. Une *Equipe* est composée de plusieurs *Joueuses*
  - la clé étrangère devra être placée dans la table *Joueuse*
- `..`* : Un *Etudiant* suit plusieurs *Cours* et un *Cours* et suivi par plusieurs *Etudiants*
  - il faut créer une table d'association entre *Etudiant* et *Cours*

Un `SGBD` (Système de Gestion de Base de Données) est un logiciel qui permet de stocker, organiser et gérer des données de manière structurée
- exemples (Bases de données relationnelles) : `PostgreSQL`, MySQL, Oracle Database
- exemples (Bases de données NoSQL pour le Big Data) : MongoDB, Cassandra 

`SQL` (Structured Query Language) est un langage de programmation conçu pour gérer et manipuler des bases de données relationnelles.

`DBeaver` est un outil client qui permet de se connecter à un SGBD.



## Exemples

#### Une simple table

```{mermaid}
classDiagram
  class Joueuse {
    id_joueuse: INT(PK)
    nom: VARCHAR
    prenom: VARCHAR
    pays: VARCHAR
    date_naissance: DATE
  }
```

| id_joueuse | nom        | prenom     | date_naissance | pays       |
|------------|------------|------------|----------------|------------|
| 1          | Sebag      | Marie      | 1986-10-15     | France     |
| 2          | Polgar     | Judit      | 1976-07-23     | Hongrie    |
| 3          | Hou        | Yifan      | 1994-02-27     | Chine      |
| 4          | Kosteniuk  | Alexandra  | 1984-04-23     | Suisse     |
| 5          | Ju         | Wenjun     | 1991-01-31     | Chine      |

---

#### Lien entre 2 tables via une clé étrangère

```{mermaid}
classDiagram
  class Joueuse {
    id_joueuse: INT (PK)
    nom: VARCHAR
    prenom: VARCHAR
    date_naissance: DATE
    code_pays: VARCHAR (FK)
  }
  
  class Pays {
    code_pays: VARCHAR (PK)
    nom: VARCHAR
  }

  Joueuse "*" -- "1" Pays : Appartient
```

`Joueuse`

| id_joueuse | nom        | prenom     | date_naissance | code_pays  |
|------------|------------|------------|----------------|------------|
| 1          | Sebag      | Marie      | 1986-10-15     | FR         |
| 2          | Polgar     | Judit      | 1976-07-23     | HU         |
| 3          | Hou        | Yifan      | 1994-02-27     | CN         |
| 4          | Kosteniuk  | Alexandra  | 1984-04-23     | CH         |
| 5          | Ju         | Wenjun     | 1991-01-31     | CN         |


`Pays`

| code_pays | nom          |
|-----------|--------------|
| CH        | Suisse       |
| CN        | Chine        |
| FR        | France       |
| HU        | Hongrie      |

---

#### Lien entre 2 tables via une table d'association

```{mermaid}
classDiagram

  class Joueuse {
    id_joueuse: INT (PK)
    nom: VARCHAR
    prenom: VARCHAR
    date_naissance: DATE
    code_pays: VARCHAR (FK)
  }
  
  class Tournoi {
    id_tournoi: INT (PK)
    nom: VARCHAR
    ville: VARCHAR
  }

  
  class Participation {
    id_joueuse: INT (PK)
    id_tournoi: INT (FK)
  }

  Joueuse "*" .. "1" Participation
  Participation "1" .. "*" Tournoi
```

## SQL

SQL (Structured Query Language) est un langage de programmation utilisé pour gérer et manipuler des bases de données relationnelles.

Il permet d'effectuer les opérations du CRUD (Create, Read, Upadate, Delete)

- `SELECT` : récupérer des données depuis une table.
- `INSERT` : insérer de nouvelles données dans une table.
- `UPDATE` : mettre à jour des données existantes dans une table.
- `DELETE` : supprimer des données d'une table.


##  Actions sur les colonnes

### Créer une Table

:bulb: le `ran.` correspond au schéma de la remise à niveau dans lequel nous rangerons toutes les tables

```sql
-- Création de la table personne (ceci est un commentaire)
CREATE TABLE ran.personnes (
    id               INT         PRIMARY KEY,
    nom              VARCHAR(30) NOT NULL,
    prenom           VARCHAR(40),
    date_naissance   DATE,
    adresse          TEXT
);
```

| id | nom    | prenom | date_naissance | adresse |
|----|--------|--------|----------------|---------|

> La table est créée mais vide

---

###  Insérer des données

```sql
INSERT INTO ran.personnes (id, nom, prenom, dnais, adresse)
VALUES
    (1, 'Dupont', 'Jean', '1990-05-15', 'Paris'),
    (2, 'Martin', 'Emma', '1985-09-22', 'Lyon'),
    (3, 'Leroy', 'Paul', '1995-03-10', 'Lille');
```

| id | nom    | prenom | date_naissance | adresse |
|----|--------|--------|----------------|---------|
| 1  | Gatore | Ali    | 1990-05-15     | Paris   |
| 2  | Dure   | Laure  | 1985-09-22     | Lyon    |
| 3  | Erateur| Maud   | 1995-03-10     | Lille   |

---

###  Renommer une colonne

```sql
ALTER TABLE ran.personnes
RENAME COLUMN date_naissance TO dnais;
```

| id | nom    | prenom | dnais      | adresse |
|----|--------|--------|------------|---------|
| 1  | Gatore | Ali    | 1990-05-15 | Paris   |
| 2  | Dure   | Laure  | 1985-09-22 | Lyon    |
| 3  | Erateur| Maud   | 1995-03-10 | Lille   |

---

###  Ajouter un attribut

```sql
ALTER TABLE ran.personnes
ADD joue_aux_echecs BOOLEAN;
```

| id | nom    | prenom | dnais      | adresse | echecs |
|----|--------|--------|------------|---------|--------|
| 1  | Gatore | Ali    | 1990-05-15 | Paris   | true   |
| 2  | Dure   | Laure  | 1985-09-22 | Lyon    | false  |
| 3  | Erateur| Maud   | 1995-03-10 | Lille   | true   |

---

###  Supprimer une colonne

```sql
ALTER TABLE ran.personnes
DROP COLUMN adresse;
```

| id | nom    | prenom | dnais      | echecs |
|----|--------|--------|------------|--------|
| 1  | Gatore | Ali    | 1990-05-15 | true   |
| 2  | Dure   | Laure  | 1985-09-22 | false  |
| 3  | Erateur| Maud   | 1995-03-10 | true   |

---

###  Supprimer une table

```sql
DROP TABLE ran.personnes;
```

```
> ERREUR: la relation « ran.personnes » n'existe pas
```

---

##  Actions sur les lignes

| id | prenom | nom    | date_naissance | adresse |
|----|--------|--------|----------------|---------|
|    |        |        |                |         |

###  Insérer des lignes

```sql
INSERT INTO ran.personnes 
(id, nom,     prenom,     date_naissance,  adresse)
VALUES
(1, 'Ali',    'Gatore',   '1990-05-15',    'Paris'),
(2, 'Laure',  'Dure',     '1985-09-22',    'Lyon' ),
(3, 'Maud',   'Erateur',  '1995-03-10',    'Lille');

```

| id | prenom | nom    | date_naissance | adresse |
|----|--------|--------|----------------|---------|
| 1  | Ali    | Gatore | 1990-05-15     | Paris   |
| 2  | Laure  | Dure   | 1985-09-22     | Lyon    |
| 3  | Maud   | Erateur| 1995-03-10     | Lille   |

---

###  Sélectionner des lignes

```sql
SELECT *
  FROM ran.personnes
 WHERE adresse LIKE 'L%'
   AND prenom = 'Laure';
```

| id | prenom | nom    | date_naissance | adresse |
|----|--------|--------|----------------|---------|
| 2  | Laure  | Dure   | 1985-09-22     | Lyon    |

---

###  Jointures

> Table `commande`

| id | produit | quantite | id_personne | prix_unitaire |
|----|---------|----------|-------------|---------------|
| 1  | livre   | 1        | 2           | 3             |

```sql
SELECT p.prenom,
       c.produit,
       c.quantite
  FROM ran.personnes p
  JOIN ran.commandes c ON p.id = c.id_personne
 WHERE prenom = 'Laure';
```

> :bulb: il est possible d'utiliser le mot clé `USING` à la place de `ON` si les 2 colonnes permettant la jointure ont **le même nom**.  
> exemple : si dans la table `personnes` nous avons `id_personne` au lieu de `id`, la requête ci-dessous peut-être modifiée en :

```sql
SELECT p.prenom,
       c.produit,
       c.quantite
  FROM ran.personnes p
  JOIN ran.commandes c USING(id_personne) -- <--
 WHERE prenom = 'Laure';
```

---

###  Jointures externes

> Que se passe t'il si nous exécutons la requête ci-dessous et qu'Ali n'a passé aucune commande ?

```sql
SELECT p.prenom,
       c.produit,
       c.quantite
  FROM ran.personnes p
  JOIN ran.commandes c ON p.id = c.id_client
```

Pour afficher toutes les personnes, même celles qui n'ont pas réalisé de commande, nous allons utiliser les **jointures externees** : `LEFT JOIN` ou `RIGHT JOIN`

```sql
SELECT p.prenom,
       c.produit,
       c.quantite
  FROM ran.personnes p
  LEFT JOIN ran.commandes c ON p.id = c.id_client
```

Ici le `LEFT JOIN` indique que nous affichons :
- les données provenant de la table **personnes**
- complétées par les données de la table **commandes** pour les lignes où le lien est établi 

---

###  Mettre à jour des lignes

```sql
UPDATE ran.personnes
   SET adresse = 'Rennes'
 WHERE id = 2;
```

| id | prenom | nom    | date_naissance | adresse |
|----|--------|--------|----------------|---------|
| 1  | Ali    | Gatore | 1990-05-15     | Paris   |
| 2  | Laure  | Dure   | 1985-09-22     | Rennes  |
| 3  | Maud   | Erateur| 1995-03-10     | Lille   |

---

###  Supprimer des lignes

```sql
DELETE FROM ran.personnes
 WHERE prenom = 'Ali';
```

| id | prenom | nom    | date_naissance | adresse |
|----|--------|--------|----------------|---------|
| 2  | Laure  | Dure   | 1985-09-22     | Rennes  |
| 3  | Maud   | Erateur| 1995-03-10     | Lille   |

---

##  Formes normales

- `1ere forme normale` (1NF) : Une relation est 1NF si elle possède au moins une clé et si tous ses attributs sont atomiques.
  - Un attribut est **atomique** si il ne contient qu'une seule valeur pour un tuple donné, et donc s'il ne regroupe pas un ensemble de plusieurs valeurs.
  - Par exemple, une adresse du type `20 rue du Général de Gaulle 35170 BRUZ` n'est pas atomique
- 2NF : 1NF + tout attribut non clé dépend de la clé
- 3NF : 2NF + un attribut non clé ne peut pas dépendre d’un autre attribut non clé

---

##  Premières manipulations

### Les schémas

Par défaut toutes les tables que nous allons créer iraient dans le schéma public.  
:bulb: pour une meilleure organisation, nous allons classer nos tables dans différents schémas :

- `ran` : schéma utilisé pour la remise à niveau
- `ci` : schéma utilisé en compléments d'informatique
- `projet` : schéma du projet info 2A

```sql
CREATE schema ran;
CREATE schema ci;
CREATE schema projet;
```

---

### Mots clés utiles

#### LIKE

> Utilisé dans une clause WHERE pour effectuer des recherches de motif dans une colonne

```sql
-- toutes les personnes ayant un prénom contenant "au"
SELECT 
  FROM ran.personnes
 WHERE prenom LIKE '%au%';
```

#### GROUP BY

> Utilisé pour regrouper les résultats en fonction d'une ou plusieurs colonnes et permettre l'utilisation de fonctions d'agrégation telles que COUNT, SUM, AVG

```sql
SELECT adresse,
       COUNT(1)
  FROM ran.personnes
 GROUP BY adresse;
```

#### HAVING

> Utilisé après la clause GROUP BY pour filtrer les résultats en fonction d'une condition après le GROUP BY.  
> :warning: ne pas confondre avec `WHERE` qui s'appliquerait avant le `GROUP BY`

```sql
SELECT adresse,
       COUNT(1)
  FROM ran.personnes
 GROUP BY adresse
HAVING COUNT(1) >= 5;
```

#### ORDER BY

```sql
SELECT *
  FROM ran.personnes
 ORDER BY adresse DESC
```

#### AS

> Permet de renommer une colonne dans l'affichage

```sql
SELECT adresse AS Ville
  FROM ran.personnes
```

---

####  Quelques possibilités d'utilisation sans table

```sql
SELECT CURRENT_DATE;
SELECT 1+2;
SELECT 1 > 2;
SELECT 'Salut';
```

---

##  Exercice

#### Avant de commencer

- consultez le fichier d'utilisation de [DBeaver](DBeaver.qmd)
- [ ] Copiez le contenu du fichier <a href="exercice/echecs.sql" target="_blank">echecs.sql</a>, 
- [ ] Collez dans DBeaver
- [ ] Exécuter le script.

#### Description des données

- Nous avons des joueurs, des tournois
- Certains joueurs sont aussi arbitres et ont un grade d'arbitre
- Les tournois ont une cadence. Ils sont arbitrés par un arbitre

```{mermaid}
classDiagram
  class arbitre_grade {
    id_arbitre_grade: INT(PK)
    nom: VARCHAR
  }

  class joueur {
    id_joueur: INT(PK)
    pseudo: VARCHAR
    nom: VARCHAR
    prenom: VARCHAR
    elo: INT
    mail: VARCHAR
    id_arbitre_grade: INT(FK -> arbitre_grade)
  }

  class cadence {
    id_cadence: INT(PK)
    nom: VARCHAR
  }

  class tournoi {
    id_tournoi: INT(PK)
    id_arbitre: INT(FK -> joueur)
    nom: VARCHAR
    debut: DATE
    fin: DATE
    nb_rondes: INT
    id_cadence: INT(FK -> cadence)
  }

  class participant {
    id_tournoi: INT(FK -> tournoi)
    id_joueur: INT(FK -> joueur)
  }

  arbitre_grade -- joueur
  cadence -- tournoi
  tournoi -- participant
  joueur -- participant

```

#### Questions

- [ ] Listez tous les joueurs
  - [ ] Faîtes de même sur les autres tables pour observer leur contenu
- [ ] Listez tous les joueurs ordonnés par elo descroissant
- [ ] Listez tous les joueurs ayant un elo inférieur ou égal à 2000
- [ ] Listez tous les joueurs ayant un elo inférieur ou égal à 2000 et dont le prénom contient un "e" (majuscule ou minuscule) :bulb: *tip : voir méthode UPPER*
- [ ] Créez la joueuse : *Martine Dupont, elo : 1999, Arbitre Elite*
- [ ] Supprimez le joueur de pseudo *marc78*
- [ ] Essayez de supprimer le joueur ayant pour id : 20
  - Pourquoi cela ne fonctionne pas ? Que faudrait-t-il faire pour supprimer ce joueur ?
- [ ] Listez les joueurs qui sont arbitres :bulb: *voir IS NOT NULL*
- [ ] Ajoutez à la table joueur la colonne de type booléen *est_arbitre*
- [ ] Remplissez cette nouvelle colonne pour tous les joueurs
- [ ] Listez les joueurs (nom, prénom) qui sont arbitres, ainsi que leur grade d'arbitre
- [ ] Listez tous les joueurs (nom, prénom) ainsi que leur grade d'arbitre s'ils le sont
- [ ] Comptez le nombre de joueurs qui sont arbitre
- [ ] Comptez le nombre d'arbitres par grade
- [ ] Comptez le nombre d'arbitres par grade et n'afficher que si la moyenne elo des arbitres du grade est supérieure à 2000
- [ ] Affichez la liste des tournois (nom du tournoi, cadence, arbitre)
- [ ] Ajouter le nombre de joueurs et le elo max des joueurs

---

La correction est disponible <a href="exercice/correction.sql" target="_blank">ici</a>.